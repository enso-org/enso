from Standard.Base import all
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Multiple_Choice, Numeric_Input, Single_Choice, Text_Input, Vector_Editor
from Standard.Base.System.File_Format import format_types
from Standard.Base.Widget_Helpers import make_format_chooser

import project.Aggregate_Column.Aggregate_Column
import project.Internal.Parse_Values_Helper
import project.Join_Condition.Join_Condition
import project.Join_Kind.Join_Kind
import project.Sort_Column.Sort_Column
import project.Table.Table
import project.Value_Type.Auto
import project.Value_Type.Value_Type
from project.Extensions.Table_Conversions import all

## PRIVATE
   Make an aggregate column selector.
make_aggregate_column_selector : Table -> Display -> Widget
make_aggregate_column_selector table display=Display.Always =
    col_names_selector = make_column_name_selector table display=Display.Always add_expression=True
    column_widget = ["column", col_names_selector]

    fqn = Meta.get_qualified_type_name Aggregate_Column
    count = Option "Count" fqn+".Count"

    ## Currently can't support nested vector editors so using single picker
    ## col_list_selector = make_column_name_vector_selector table display=Display.Always
    count_distinct = Option "Count Distinct" fqn+".Count_Distinct" [["columns", col_names_selector]]

    ## Currently can't support nested vector editors so using single order by picker
    order_by_selector = make_order_by_selector table
    first = Option "First" fqn+".First" [column_widget, ["order_by" , order_by_selector]]
    last = Option "Last" fqn+".Last" [column_widget, ["order_by" , order_by_selector]]

    count_not_nothing = Option "Count Not Nothing" fqn+".Count_Not_Nothing" [column_widget]
    count_nothing = Option "Count Nothing" fqn+".Count_Nothing" [column_widget]

    ## Should be a list of Text columns only
    count_not_empty = Option "Count Not Empty" fqn+".Count_Not_Empty" [column_widget]
    count_empty = Option "Count Empty" fqn+".Count_Empty" [column_widget]
    concatenate = Option "Concatenate" fqn+".Concatenate" [column_widget]
    shortest = Option "Shortest" fqn+".Shortest" [column_widget]
    longest = Option "Longest" fqn+".Longest" [column_widget]

    ## Should be a list of Numeric columns only
    sum = Option "Sum" fqn+".Sum" [column_widget]
    average = Option "Average" fqn+".Average" [column_widget]
    median = Option "Median" fqn+".Median" [column_widget]
    percentile = Option "Percentile" fqn+".Percentile" [column_widget]
    mode = Option "Mode" fqn+".Mode" [column_widget]
    standard_deviation = Option "Standard Deviation" fqn+".Standard_Deviation" [column_widget]

    # Should be a list of comparable columns only
    maximum = Option "Maximum" fqn+".Maximum" [column_widget]
    minimum = Option "Minimum" fqn+".Minimum" [column_widget]

    Single_Choice display=display values=[count, count_distinct, first, last, count_not_nothing, count_nothing, count_not_empty, count_empty, concatenate, shortest, longest, sum, average, median, percentile, mode, standard_deviation, maximum, minimum]

## PRIVATE
   Make an Aggregate_Column list editor
make_aggregate_column_vector_selector : Table -> Display -> Widget
make_aggregate_column_vector_selector table display=Display.Always =
    item_editor = make_aggregate_column_selector table display=Display.Always
    # TODO this is a workaround for a dropdown issue
    Vector_Editor item_editor=item_editor item_default="(Aggregate_Column.Count)" display=display

## PRIVATE
   Make a column name selector.
make_column_name_selector : Table -> Boolean -> Display -> Widget
make_column_name_selector table add_expression:Boolean=False display=Display.Always =
    col_names = table.column_names
    names = col_names.map n-> Option n n.pretty
    expression = if add_expression then [Option "<Expression>" "(expr '["+table.column_names.first+"]')"] else []
    Single_Choice display=display values=(expression+names)

## PRIVATE
   Make a multiple column name selector.
make_column_name_vector_selector : Table -> Display -> Widget
make_column_name_vector_selector table display=Display.Always =
    item_editor = make_column_name_selector table display=Display.Always
    Vector_Editor item_editor=item_editor item_default=item_editor.values.first.value display=display

## PRIVATE
   Make a multiple column-name selector that allows each value to be selected at most once.
make_column_name_multi_selector : Table -> Display -> Widget
make_column_name_multi_selector table display=Display.Always =
    names = table.column_names.map n-> Option n n.pretty
    Multiple_Choice values=names display=display

## PRIVATE
   Make a column reference by name selector.
make_column_ref_by_name_selector : Table -> Display -> Boolean -> Boolean -> Boolean -> Boolean -> Widget
make_column_ref_by_name_selector table display:Display=Display.Always add_text:Boolean=False add_regex:Boolean=False add_number:Boolean=False add_boolean:Boolean=False =
    text = if add_text then [Option "<Text Value>" "''"] else []
    regex = if add_regex then [Option "<Regular Expression>" "(regex '')"] else []
    number = if add_number then [Option "<Number Value>" "0"] else []
    boolean = if add_boolean then [Option "<True/False>" "True"] else []
    expression = if table.is_nothing then [] else [Option "<Expression>" "(expr '["+table.column_names.first+"]')"]
    col_names = if table.is_nothing then [] else table.column_names.map (name -> Option name "(Column_Ref.Name "+name.pretty+")")
    values = text + regex + number + boolean + expression + col_names
    Single_Choice values=values display=display

## PRIVATE
   If `column_source` is Nothing, `Column_Ref` options will not be added.
make_fill_default_value_selector : Table | Nothing -> Display -> Boolean -> Boolean -> Boolean -> Widget
make_fill_default_value_selector column_source=Nothing display=Display.Always add_text:Boolean=False add_number:Boolean=False add_boolean:Boolean=False =
    column_ref = make_column_ref_by_name_selector column_source display add_text add_regex=False add_number=add_number add_boolean=add_boolean
    previous_value = [Option 'Previous Value' 'Previous_Value']
    Single_Choice values=(previous_value+column_ref.values) display=display

## PRIVATE
   Make a filter condition selector.
make_filter_condition_selector : Table -> Display -> Widget
make_filter_condition_selector table display=Display.Always =
    col_names = make_column_ref_by_name_selector table
    with_all_types = make_column_ref_by_name_selector table add_text=True add_number=True add_boolean=True
    with_number_text = make_column_ref_by_name_selector table add_text=True add_number=True
    with_text = make_column_ref_by_name_selector table add_text=True

    builder = Vector.new_builder
    fqn = Meta.get_qualified_type_name Filter_Condition
    builder.append (Option "Equals" fqn+".Equal" [["to", with_all_types]])
    builder.append (Option "Not Equals" fqn+".Not_Equal" [["to", with_all_types]])
    builder.append (Option "Less Than" fqn+".Less" [["than", with_number_text]])
    builder.append (Option "Less Than Or Equal" fqn+".Equal_Or_Less" [["than", with_number_text]])
    builder.append (Option "Greater Than" fqn+".Greater" [["than", with_number_text]])
    builder.append (Option "Greater Than Or Equal" fqn+".Equal_Or_Greater" [["than", with_number_text]])
    builder.append (Option "Between" fqn+".Between" [["lower", col_names], ["upper", with_number_text]])
    builder.append (Option "Equals Ignore Case" fqn+".Equal_Ignore_Case" [["to", with_text]])
    builder.append (Option "Starts With" fqn+".Starts_With" [["prefix", with_text]])
    builder.append (Option "Ends With" fqn+".Ends_With" [["suffix", with_text]])
    builder.append (Option "Contains" fqn+".Contains" [["substring", with_text]])
    builder.append (Option "Is Nothing" fqn+".Is_Nothing")
    builder.append (Option "Is Not Nothing" fqn+".Not_Nothing")
    builder.append (Option "Is Finite" fqn+".Is_Finite")
    builder.append (Option "Is Infinite" fqn+".Is_Infinite")
    builder.append (Option "Is NaN" fqn+".Is_Nan")
    builder.append (Option "Is True" fqn+".Is_True")
    builder.append (Option "Is False" fqn+".Is_False")
    builder.append (Option "Is Empty" fqn+".Is_Empty")
    builder.append (Option "Is Not Empty" fqn+".Not_Empty")
    builder.append (Option "Like" fqn+".Like" [["pattern", with_text]])
    builder.append (Option "Is In" fqn+".Is_In")
    Single_Choice builder.to_vector display=display

## PRIVATE
   Make a join kind selector - Needed to override display.
make_join_kind_selector : Display -> Widget
make_join_kind_selector display=Display.Always =
    fqn = Meta.get_qualified_type_name Join_Kind
    options = ["Inner", "Left_Outer", "Right_Outer", "Full", "Left_Exclusive", "Right_Exclusive"].map n-> Option n fqn+"."+n
    Single_Choice display=display values=options

## PRIVATE
   Make a join condition selector.
make_join_condition_selector : Table -> Display -> Widget
make_join_condition_selector table display=Display.Always =
    col_names_selector = make_column_name_selector table display=Display.Always

    fqn = Meta.get_qualified_type_name Join_Condition
    equals = Option "Equals" fqn+".Equals" [["left", col_names_selector], ["right", Text_Input]]
    equals_ci = Option "Equals (Ignore Case)" fqn+".Equals_Ignore_Case" [["left", col_names_selector], ["right", Text_Input]]
    between = Option "Between" fqn+".Between" [["left", col_names_selector], ["right_lower", Text_Input], ["right_upper", Text_Input]]
    names=[equals, equals_ci, between]

    item_editor = Single_Choice display=display values=names
    Vector_Editor item_editor=item_editor item_default="(Join_Condition.Equals "+table.column_names.first.pretty+")" display=display

## PRIVATE
   Make a column name selector.
make_order_by_selector : Table -> Display -> Widget
make_order_by_selector table display=Display.Always =
    fqn = Meta.get_qualified_type_name Sort_Column
    name = Option "Name" fqn+".Name" [["name", make_column_name_selector table display=Display.Always]]
    index = Option "Index" fqn+".Index" [["index", Numeric_Input display=Display.Always minimum=0 maximum=table.column_count-1]]

    item_editor = Single_Choice display=Display.Always values=[name, index]
    Vector_Editor item_editor=item_editor item_default="(Sort_Column.Name "+table.column_names.first.pretty+")" display=display

## PRIVATE
   Make a column rename name selector.
make_rename_name_vector_selector : Table -> Display -> Widget
make_rename_name_vector_selector table display=Display.Always =
    col_names = table.column_names
    names = [Option "<Regular Expression>" "(regex '^.*$')"] + (col_names.map n-> Option n n.pretty)
    fqn = Meta.get_qualified_type_name Pair
    name = Option "Name" fqn+".Value" [["first", Single_Choice values=names display=Display.Always]]
    item_editor = Single_Choice display=Display.Always values=[name]
    Vector_Editor item_editor=item_editor item_default="(Pair.Value "+col_names.first.pretty+" 'New Name')" display=display

## PRIVATE
   Selector for type argument on `Column.parse`.
parse_type_selector : Boolean -> Widget
parse_type_selector include_auto=True =
    valid_parse_targets = Parse_Values_Helper.valid_parse_targets

    prefix = if include_auto then ['Auto'] else []
    names = prefix + valid_parse_targets

    fqn = Meta.get_qualified_type_name Value_Type
    choice = names.map n-> if n=='Auto' then (Meta.get_qualified_type_name Auto) else fqn+'.'+n

    options = names.zip choice . map pair-> Option pair.first pair.second
    Single_Choice display=Display.Always values=options

## PRIVATE
   Selector for writing a table to a file.
write_table_selector : Widget
write_table_selector =
    can_write type = if type == JSON_Format then True else
        Meta.meta type . methods . contains "write_table"
    all_types = [Auto_Detect] + (format_types.filter can_write)
    Single_Choice display=Display.Always values=(all_types.flat_map .get_dropdown_options)

## PRIVATE
   Make format selector based off value type
make_format_chooser_for_type : Value_Type -> Widget
make_format_chooser_for_type value_type =
    include_number = value_type.is_numeric || value_type==Value_Type.Mixed
    include_date = value_type==Value_Type.Date || value_type==Value_Type.Mixed
    include_date_time = value_type.is_date_time || value_type==Value_Type.Mixed
    include_time = value_type==Value_Type.Time || value_type==Value_Type.Mixed
    include_boolean = value_type.is_boolean || value_type==Value_Type.Mixed
    make_format_chooser include_number include_date include_date_time include_time include_boolean

## PRIVATE
   Make value type selector for type filtering
make_value_type_vector_selector : Widget
make_value_type_vector_selector =
    meta = Meta.meta Value_Type
    options = meta.constructors.map c-> Option c.name meta.qualified_name+"."+c.name
    item_editor = Single_Choice display=Display.Always values=options
    Vector_Editor item_editor=item_editor item_default="Value_Type.Boolean" display=Display.Always
