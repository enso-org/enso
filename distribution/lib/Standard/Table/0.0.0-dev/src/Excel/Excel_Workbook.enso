from Standard.Base import all
import Standard.Base.Errors.Deprecated.Deprecated
import Standard.Base.Errors.File_Error.File_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Metadata.Display
import Standard.Base.Metadata.Widget
import Standard.Base.Runtime.Managed_Resource.Managed_Resource
import Standard.Base.Runtime.Ref.Ref
import Standard.Base.System.File.Advanced.Temporary_File.Temporary_File
import Standard.Base.System.Input_Stream.Input_Stream
from Standard.Base.Data.Filter_Condition import sql_like_to_regex
from Standard.Base.Metadata.Choice import Option
from Standard.Base.Metadata.Widget import Multiple_Choice, Single_Choice

import project.Columns_To_Keep.Columns_To_Keep
import project.Excel.Excel_Range.Excel_Range
import project.Headers.Headers
import project.Internal.Excel_Reader
import project.Internal.Excel_Section.Excel_Section
import project.Internal.Java_Problems
import project.Internal.Problem_Builder.Problem_Builder
import project.Match_Columns.Match_Columns
import project.Rows_To_Read.Rows_To_Read
import project.Table.Table
from project.Errors import Empty_Sheet
from project.Internal.Excel_Reader import handle_invalid_location

polyglot java import java.io.File as Java_File
polyglot java import org.apache.poi.ss.usermodel.Workbook
polyglot java import org.enso.table.excel.ExcelConnectionPool
polyglot java import org.enso.table.excel.ExcelFileFormat
polyglot java import org.enso.table.excel.ReadOnlyExcelConnection
polyglot java import org.enso.table.read.ExcelReader

type Excel_Workbook
    ## PRIVATE
       ADVANCED
       Load a File as a connection to an Excel workbook.

       Arguments:
       - file: The file to load.
       - xls_format: Whether to use the old XLS format (default is XLSX).
    new : File | Temporary_File -> Boolean  -> Excel_Workbook
    new file:(File | Temporary_File) xls_format:Boolean=False =
        file_for_errors = if file.is_a Temporary_File then Nothing else file

        continuation raw_file =
            format = if xls_format then ExcelFileFormat.XLS else ExcelFileFormat.XLSX
            File_Error.handle_java_exceptions raw_file <| Excel_Reader.handle_bad_format file_for_errors <| Illegal_State.handle_java_exception <|
                # The `java_file` depends on the liveness of the possible `Temporary_File` but that is ensured by storing the `file` in the resulting workbook instance.
                java_file = Java_File.new raw_file.absolute.normalize.path
                excel_connection_resource = Managed_Resource.register (ExcelConnectionPool.INSTANCE.openReadOnlyConnection java_file format) close_connection
                Excel_Workbook.Value (Ref.new excel_connection_resource) file xls_format

        case file of
            tmp : Temporary_File -> tmp.with_file continuation
            f : File -> continuation f

    ## PRIVATE
       ADVANCED
       Load an Input_Stream as a connection to an Excel workbook.

       Arguments:
       - stream: The stream to load.
       - xls_format: Whether to use the old XLS format (default is XLSX).
       - file: Optional file reference.
    from_stream : Input_Stream -> Boolean -> File | Nothing -> Excel_Workbook
    from_stream stream xls_format:Boolean=False file:Boolean=Nothing = Excel_Reader.handle_bad_format file <|
        temp_file = Temporary_File.from_stream_light stream
        Excel_Workbook.new temp_file xls_format

    ## PRIVATE
       Creates an Excel_Workbook connection.
    private Value (excel_connection_resource_ref : Ref (Managed_Resource ReadOnlyExcelConnection)) (file:(File|Temporary_File|Nothing)) internal_xls_format:Boolean

    ## Is the Workbook in the old XLS format?
    xls_format : Boolean
    xls_format self = self.internal_xls_format

    ## PRIVATE
       ICON metadata
       Returns the list of databases (or catalogs) for the connection.
    databases : Vector (Text | Nothing)
    databases self = [Nothing]

    ## PRIVATE
       ICON metadata
       Returns the name of the current file.
    database : Text
    database self = case self.file of
        regular_file : File -> regular_file.path
        ## A Temporary_File is still visualized as no path, because the fact that the workbook is stored as a file is
           just an implementation detail - it is coming form a stream so there is no logical file it is associated with.
        _ -> ""

    ## PRIVATE
       ICON data_input
       Returns a new Workbook with the specified file.

       Arguments:
        - database: The target file to open as an Excel_Workbook.
    set_database : Text | File -> Excel_Workbook ! Illegal_Argument
    set_database self database:(Text | File) =
        if database == self.database then self else
            file = File.new database
            if file.exists && file.is_directory.not then Excel_Workbook.new file self.xls_format else
                Error.throw (Illegal_Argument.Error "The specified file ('"+file.path+"') does not exist.")

    ## PRIVATE
       ICON metadata
       Returns the list of schemas for the connection within the current database (or catalog).
    schemas : Vector (Text | Nothing)
    schemas self = [Nothing]

    ## PRIVATE
       ICON metadata
       Returns the name of the current schema.
    schema : Text | Nothing
    schema self = Nothing

    ## PRIVATE
       ICON data_input
       Returns a new Workbook with the specified schema set as default.

       Arguments:
        - schema: The name of the schema to connect to.
    @schema (Single_Choice display=Display.Always values=[Option 'Nothing'])
    set_schema : Text | Nothing -> Excel_Workbook ! Illegal_Argument
    set_schema self schema =
        if schema == self.schema then self else
            Error.throw (Illegal_Argument.Error "Changing schema is not supported.")

    ## GROUP Standard.Base.Metadata
       ICON metadata
       Gets the number of sheets.
    sheet_count : Integer
    sheet_count self = self.with_java_workbook .getNumberOfSheets

    ## GROUP Standard.Base.Metadata
       ICON metadata
       Gets the names of all the sheets.
    sheet_names : Vector Text
    sheet_names self = self.with_java_workbook java_workbook->
        Vector.from_polyglot_array (ExcelReader.readSheetNames java_workbook)

    ## GROUP Standard.Base.Metadata
       ICON metadata
       Gets the number of named ranges.
    named_ranges_count : Integer
    named_ranges_count self = self.with_java_workbook .getNumberOfNames

    ## GROUP Standard.Base.Metadata
       ICON metadata
       Gets the names of all the named ranges.
    named_ranges : Vector Text
    named_ranges self = self.with_java_workbook java_workbook->
        Vector.from_polyglot_array (ExcelReader.readRangeNames java_workbook)

    ## PRIVATE
       ICON metadata
       Gets a list of the table types.
    table_types : Vector Text
    table_types self = ['Worksheet', 'Named Range']

    ## PRIVATE
       GROUP Standard.Base.Metadata
       ICON metadata
       Returns a materialised Table of all the matching views and tables.

       Arguments:
       - name_like: The table name pattern to search for. Support SQL wildcards (`%`, `_`).
       - database: The database name to search in (default is current database).
       - schema: The schema name to search in (defaults to current schema).
       - types: The table types to search for. The list of values can be obtained using the `table_types` method.
       - all_fields: Return all the fields in the metadata table.
    @types (self-> Single_Choice values=(self.table_types.map t-> Option t t.pretty))
    tables : Text -> Text -> Text -> Vector -> Boolean -> Table
    tables self name_like=Nothing database=self.database schema=self.schema types=Nothing all_fields=False =
        types_vector = case types of
            Nothing -> Nothing
            _ : Vector -> types
            _ -> [types]

        _ = [all_fields]
        rows = if schema != Nothing then [] else
            sheets = if types_vector.is_nothing || types_vector.contains "Worksheet" then self.sheet_names.map s-> [s, 'Worksheet', database, Nothing] else []
            ranges = if types_vector.is_nothing || types_vector.contains "Named Range" then self.named_ranges.map r-> [r, 'Named Range', database, Nothing] else []
            sheets + ranges

        filtered = if name_like == Nothing then rows else
            regex = sql_like_to_regex name_like
            rows.filter r-> regex.matches r.first

        Table.from_rows ['Name', 'Type', 'Database', 'Schema'] filtered

    ## PRIVATE
       ICON data_input
       Read a range into a Table.

       Arguments:
       - query: sheet name, range name or address to read from the workbook.
       - alias: optionally specify a friendly alias for the query (unused).
       - headers: whether to use the first row as headers (default is
         `Detect_Headers`).
    @query (self-> Single_Choice display=Display.Always values=(self.tables.at "Name" . to_vector . map t-> Option t t.pretty))
    query : Text -> Text -> Headers -> Table
    query self (query : Text) (alias : Text = "") (headers : Headers = Headers.Detect_Headers) =
        _ = [alias]
        self.read query headers=headers

    ## ALIAS range, sheet, worksheet, get
       GROUP Standard.Base.Input
       ICON data_input
       Read a range into a Table.

       Arguments:
       - query: sheet name, range name or address to read from the workbook.
       - headers: whether to use the first row as headers (default is
         `Detect_Headers`).
       - limit: the maximum number of rows to read.
         If set to `Nothing`, all rows will be returned.
    @query (self-> Single_Choice display=Display.Always values=(self.tables.at "Name" . to_vector . map t-> Option t t.pretty))
    @limit Rows_To_Read.default_widget
    read : Text | Excel_Range -> Headers -> Rows_To_Read -> Problem_Behavior -> Table
    read self (query : Text | Excel_Range) (headers : Headers = Headers.Detect_Headers) (limit : Rows_To_Read = ..All_Rows) (on_problems:Problem_Behavior=..Report_Warning) =
        java_headers = Excel_Reader.make_java_headers headers
        java_limit = limit.rows_to_read
        java_table = Java_Problems.with_problem_aggregator on_problems java_problem_aggregator->
            self.with_java_workbook java_workbook-> case query of
                _ : Excel_Range -> ExcelReader.readRange java_workbook query.java_range java_headers 0 java_limit java_problem_aggregator
                _ : Text -> ExcelReader.readRangeByName java_workbook query java_headers 0 java_limit java_problem_aggregator
        limit.attach_warning (Table.Value java_table)

    ## PRIVATE
       GROUP Standard.Base.Input
       ICON data_input
       Read an Excel_Section from the Workbook

       Arguments:
       - section: the section to read.
    read_section : Excel_Section -> (Excel_Workbook | Table | Vector)
    read_section self section =
        case section of
            Excel_Section.Worksheet sheet headers skip_rows row_limit ->
                java_headers = Excel_Reader.make_java_headers headers
                java_limit = row_limit.rows_to_read
                names = self.sheet_names
                sheet_name = case sheet of
                    _ : Text -> if names.contains sheet then sheet else Error.throw (Illegal_Argument.Error "Worksheet not found.")
                    _ : Integer ->
                        if (sheet < 1 || sheet >= names.length) then Error.throw (Illegal_Argument.Error "Worksheet index out of range.") else
                            names.at (sheet - 1)
                    _ -> Error.throw (Illegal_Argument.Error "Worksheet must be either Text or an Integer.")
                java_table = Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
                    self.with_java_workbook java_workbook->
                        ExcelReader.readRangeByName java_workbook sheet_name java_headers skip_rows java_limit java_problem_aggregator
                row_limit.attach_warning (Table.Value java_table)
            Excel_Section.Cell_Range address headers skip_rows row_limit ->
                java_headers = Excel_Reader.make_java_headers headers
                java_limit = row_limit.rows_to_read
                java_table = Java_Problems.with_problem_aggregator Problem_Behavior.Report_Warning java_problem_aggregator->
                    self.with_java_workbook java_workbook-> case address of
                        _ : Excel_Range -> ExcelReader.readRange java_workbook address.java_range java_headers skip_rows java_limit java_problem_aggregator
                        _ : Text -> ExcelReader.readRangeByName java_workbook address java_headers skip_rows java_limit java_problem_aggregator
                row_limit.attach_warning (Table.Value java_table)

    ## PRIVATE
       GROUP Standard.Base.Input
       ICON data_input
       Reads a worksheet from the workbook.

       Arguments:
       - name: the name of the worksheet to read.
       - headers: whether to use the first row as headers (default is
         `Detect_Headers`).
    @name (self-> Single_Choice display=Display.Always values=(self.sheet_names.map t-> Option t t.pretty))
    sheet : Text | Integer -> Headers -> Table
    sheet self name:(Text | Integer) headers:Headers=Headers.Detect_Headers =
        Warning.attach (Deprecated.Warning "Standard.Table.Excel.Excel_Workbook.Excel_Workbook" "sheet" "Deprecated: use `read` instead.") <|
            self.read_section (Excel_Section.Worksheet name headers 0 Nothing)

    ## PRIVATE
       ADVANCED
       Closes the workbook, releasing any resources it holds.

       This method may be used to release the underlying workbook file,
       e.g. to be able to delete it.

       After this method is called, this instance is not usable any more - any
       operation on it will throw an `Illegal_State` error.
    close : Nothing
    close self =
        case self.excel_connection_resource_ref.get of
            Nothing -> Nothing
            resource ->
                resource.finalize
                self.excel_connection_resource_ref.put Nothing
        Nothing

    ## PRIVATE
       Returns a simple text description of the workbook.
    to_text : Text
    to_text self =
        associated_regular_file = case self.file of
            regular_file : File -> " (" + regular_file.name + ")"
            _ -> ""
        "Excel_Workbook"+associated_regular_file

    ## PRIVATE
       Provides a JS object representation for use in visualizations.
    to_js_object : JS_Object
    to_js_object self =
        values=(self.tables.at "Name" . to_vector)
        additional_fields = case self.file of
            regular_file : File -> [["file", regular_file.path], ["sheet_names", values]]
            _ -> []
        JS_Object.from_pairs <|
            [["type", "Excel_Workbook"], ["xls_format", self.xls_format]] + additional_fields

    ## PRIVATE
    with_java_workbook : (Workbook -> Any) -> Any ! Illegal_State
    with_java_workbook self f = Illegal_State.handle_java_exception <| handle_invalid_location <| Empty_Sheet.handle_java_exception <|
        case self.excel_connection_resource_ref.get of
            Nothing ->
                Error.throw (Illegal_State.Error "The workbook is being used after it was closed.")
            resource -> resource.with connection->
                connection.withWorkbook f

    ## GROUP Standard.Base.Input
       ICON data_input
       Reads one or more sheets into a Table.

       Arguments:
       - sheet_names: the names of sheets, ranges or addresses to read.
         Defaults to all sheets. An invalid `sheet_name` will be reported as a
         problem.
       - headers: whether to use the first row as headers (default is
         `Detect_Headers`) for each sheet.
       - return: how to return the tables. Defaults to `Merged_Table` meaning
         the tables are merged into a single table.
       - on_problems: how to handle problems during reading. Defaults to
         `Report_Warning`.
    @sheet_names build_sheet_selector
    read_many : Vector Text -> Headers -> Return_As -> Problem_Behavior -> Table
    read_many self sheet_names:Vector=self.sheet_names (headers:Headers=..Detect_Headers) (return:Return_As=..Merged_Table) (on_problems:Problem_Behavior=..Report_Warning) =
        if sheet_names.is_empty then Error.throw (Illegal_Argument.Error "No sheets selected.") else
            tables = sheet_names.map on_problems=on_problems address-> self.read address headers on_problems=on_problems
            case return of
                Return_As.Table_Of_Tables -> Table.new [["Sheet Name", sheet_names], ["Table", tables]]
                Return_As.Merged_Table columns_to_keep match ->
                    first_tbl = tables.find t-> t != Nothing
                    if first_tbl == Nothing then Error.throw (Illegal_Argument.Error "No valid sheets found.") else
                        unique = first_tbl.column_naming_helper.create_unique_name_strategy
                        tables.each tbl-> if tbl != Nothing then unique.mark_used tbl.column_names
                        new_column_name = unique.make_unique "Sheet Name"

                        with_names = tables.zip sheet_names tbl->name-> if tbl == Nothing then Nothing else tbl.set name new_column_name . reorder_columns [new_column_name]
                        result = Table.from_union (with_names.filter Filter_Condition.Not_Nothing) columns_to_keep=columns_to_keep match_columns=match

                        problem_builder = Problem_Builder.new
                        problem_builder.report_unique_name_strategy unique
                        problem_builder.attach_problems_after on_problems result

## PRIVATE
close_connection c = c.close

## PRIVATE
build_sheet_selector workbook:Excel_Workbook display:Display=Display.Always -> Widget =
    names = workbook.sheet_names.map n-> Option n n.pretty
    Multiple_Choice display=display values=names

## How to merge sheets into a single table.
type Return_As
    ## Each sheet is returned as a row.
    Table_Of_Tables

    ## All sheets are merged into a single table. A union operation is performed.
    Merged_Table (columns_to_keep : Columns_To_Keep = Columns_To_Keep.In_Any) (match : Match_Columns = Match_Columns.By_Name)
