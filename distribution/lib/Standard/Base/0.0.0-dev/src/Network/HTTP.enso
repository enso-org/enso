import project.Any.Any
import project.Data.Dictionary.Dictionary
import project.Data.Hashset.Hashset
import project.Data.Numbers.Integer
import project.Data.Pair.Pair
import project.Data.Sort_Direction.Sort_Direction
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Time.Date_Time.Date_Time
import project.Data.Time.Duration.Duration
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Error.Error
import project.Errors.Common.Forbidden_Operation
import project.Errors.Common.Response_Too_Large
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Function.Function
import project.Meta
import project.Network.HTTP.Cache_Policy.Cache_Policy
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP_Error.HTTP_Error
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.HTTP_Version.HTTP_Version
import project.Network.HTTP.Request.Request
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.HTTP.Response.Response
import project.Network.Proxy.Proxy
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Context
import project.System.File.File
from project.Data.Boolean import Boolean, False, True
from project.Data.Json.Extensions import all

polyglot java import java.lang.IllegalArgumentException
polyglot java import java.io.IOException
polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpClient.Builder as ClientBuilder
polyglot java import java.net.http.HttpClient.Redirect
polyglot java import java.net.http.HttpClient.Version
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpRequest.BodyPublisher
polyglot java import java.net.http.HttpRequest.BodyPublishers
polyglot java import java.net.http.HttpRequest.Builder
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import javax.net.ssl.SSLContext
polyglot java import org.enso.base.enso_cloud.EnsoHTTPResponseCache
polyglot java import org.enso.base.enso_cloud.EnsoSecretHelper
polyglot java import org.enso.base.file_system.File_Utils
polyglot java import org.enso.base.net.http.MultipartBodyBuilder
polyglot java import org.enso.base.net.http.UrlencodedBodyBuilder

type HTTP
    ## PRIVATE
       ADVANCED
       Create a new instance of the HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.

       > Example
         Create an HTTP client with default settings.
             HTTP.new

       > Example
         Create an HTTP client with extended timeout.
             HTTP.new timeout=(Duration.new seconds=30)

       > Example
         Create an HTTP client with extended timeout and proxy settings.

             import Standard.Base.Data.Time.Duration.Duration
             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.Proxy.Proxy

             example_new =
                HTTP.new (timeout = (Duration.new seconds=30)) (proxy = Proxy.Address "example.com" 8080)
    new : Duration -> Boolean -> Proxy -> HTTP_Version -> HTTP
    new (timeout:Duration=(Duration.new seconds=10)) (follow_redirects:Boolean=True) (proxy:Proxy=Proxy.System) (version:HTTP_Version=HTTP_Version.HTTP_2) =
        HTTP.Value timeout follow_redirects proxy version Nothing

    ## PRIVATE
       An HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.
       - custom_ssl_context: A custom SSL context to use for requests, or
         Nothing if the default should be used. For most use cases, it is
         recommended to use the default.
    Value timeout follow_redirects proxy version custom_ssl_context

    ## ADVANCED
       ICON data_download
       Sends a request using the HTTP client.
       The response body will contain a raw Input_Stream which can be read once.
       Please note, this must be closed after use (either directly or via the
       helpers on Response_Body).

       ! Response caching

         See `Data.fetch` for information about response caching.

       Arguments:
       - req: The HTTP request to send using `self` HTTP client.
       - error_on_failure_code: Whether or not to throw an error if the response
         code is not a success code.
    request : Request -> Boolean -> Cache_Policy -> Response ! Request_Error | HTTP_Error | Illegal_Argument | Response_Too_Large
    request self req error_on_failure_code=True (cache_policy:Cache_Policy = ..Default) =
        # Prevent request if the method is a write-like method and output context is disabled.
        check_output_context ~action =
            if fetch_methods.contains req.method || Context.Output.is_enabled then action else
                Error.throw (Forbidden_Operation.Error ("As writing is disabled, " + req.method.to_text + " request not sent. Press the Write button â–¶ to send it."))
        # You can only explicitly mention the cache for GET requests.
        check_cache_policy ~action =
            cache_policy_value_ok = req.method == HTTP_Method.Get || cache_policy != Cache_Policy.Use_Cache
            if cache_policy_value_ok then action else
                Error.throw (Illegal_Argument.Error "Cannot specify cache policy for a "+req.method.to_text+" request")

        handle_request_error =
            handler caught_panic =
                exception = caught_panic.payload
                Error.throw (Request_Error.Error (Meta.type_of exception . to_text) exception.getMessage)
            Panic.catch IllegalArgumentException handler=handler <| Panic.catch IOException handler=handler

        handle_request_error <| Illegal_Argument.handle_java_exception <| check_output_context <| check_cache_policy <| Response_Too_Large.handle_java_exception <|
            headers = resolve_headers req
            headers.if_not_error <|
                body_publisher_and_boundary = resolve_body_to_publisher_and_boundary req.body
                body_publisher_and_boundary.if_not_error <|
                    # Create builder and set method and body
                    builder = HttpRequest.newBuilder
                    builder.method req.method.to_http_method_name body_publisher_and_boundary.first

                    # Create Unified Header list
                    boundary = body_publisher_and_boundary.second
                    boundary_header_list = if boundary.is_nothing then [] else [Header.multipart_form_data boundary]
                    all_headers = headers + boundary_header_list
                    mapped_headers = all_headers.map on_problems=No_Wrap .to_java_pair

                    response = Response.Value (EnsoSecretHelper.makeRequest self.internal_http_client builder req.uri.to_java_representation mapped_headers (cache_policy.should_use_cache req))
                    if error_on_failure_code.not || response.code.is_success then response else
                        body = response.body.decode_as_text.catch Any _->""
                        message = if body.is_empty then Nothing else body
                        Error.throw (HTTP_Error.Status_Error response.code message response.uri)

    ## PRIVATE
       Static helper for get-like methods

       ! Response caching

         See `Data.fetch` for information about response caching.
    fetch : (URI | Text) -> HTTP_Method -> Vector (Header | Pair Text Text) -> Cache_Policy -> Response ! Request_Error | HTTP_Error
    fetch (uri:(URI | Text)) (method:HTTP_Method=..Get) (headers:(Vector (Header | Pair Text Text))=[]) (cache_policy:Cache_Policy = ..Default) =
        check_method fetch_methods method <|
            request = Request.new method uri (parse_headers headers) Request_Body.Empty
            HTTP.new.request request cache_policy=cache_policy

    ## PRIVATE
       Static helper for post-like methods
    post : (URI | Text) -> Request_Body -> HTTP_Method -> Vector (Header | Pair Text Text) -> Response ! Request_Error | HTTP_Error
    post (uri:(URI | Text)) (body:Request_Body=Request_Body.Empty) (method:HTTP_Method=HTTP_Method.Post) (headers:(Vector (Header | Pair Text Text))=[]) =
        check_method post_methods method <|
            request = Request.new method uri (parse_headers headers) body
            HTTP.new.request request

    ## ALIAS flush
       ICON temp
       Clear the HTTP request cache.

       > Example
         Clear the HTTP response cache.

             import Standard.Base.Network.HTTP

             HTTP.clear_response_cache
    clear_response_cache : Nothing
    clear_response_cache -> Nothing = EnsoHTTPResponseCache.clear

    ## PRIVATE

       Build an HTTP client.
    internal_http_client : HttpClient
    internal_http_client self =
        builder = HttpClient.newBuilder.connectTimeout self.timeout

        redirect_policy = if self.follow_redirects then HttpClient.Redirect.ALWAYS else HttpClient.Redirect.NEVER
        builder.followRedirects redirect_policy

        case self.proxy of
            Proxy.Address proxy_host proxy_port -> builder.proxy (ProxySelector.of (InetSocketAddress.new proxy_host proxy_port))
            Proxy.System -> builder.proxy ProxySelector.getDefault
            Proxy.None -> Nothing

        case self.version of
            HTTP_Version.HTTP_1_1 -> builder.version HttpClient.Version.HTTP_1_1
            HTTP_Version.HTTP_2 -> builder.version HttpClient.Version.HTTP_2

        if self.custom_ssl_context.is_nothing.not then
            builder.sslContext self.custom_ssl_context

        builder.build

    ## PRIVATE
       ADVANCED
       Create a copy of the HTTP client with a custom SSL context.
    set_custom_ssl_context : SSLContext -> HTTP
    set_custom_ssl_context self ssl_context =
        HTTP.Value self.timeout self.follow_redirects self.proxy self.version ssl_context

## PRIVATE
parse_headers : Vector (Header | Pair Text Text) -> Vector Header
parse_headers headers =
    headers . map on_problems=No_Wrap h-> case h of
        _ : Vector -> Header.new (h.at 0) (h.at 1)
        _ : Pair -> Header.new (h.at 0) (h.at 1)
        _ : Function -> h:Header
        _ : Header -> h
        _ -> Error.throw (Illegal_Argument.Error "Invalid header type - all values must be Vector, Pair or Header (got "+(Meta.get_simple_type_name h)+").")

## PRIVATE
   If either encoding or content type is specified in the Request_Body, that is used as the content type header.
   If encoding is specified without content type, "text/plain" is used as the content type.
   It is an error to specify the content type in both the request body and the header list.
   If the body is not Request_Body.Empty, and no content type is specified, a default is used.
resolve_headers : Request -> Vector Header
resolve_headers req =
    is_content_type_header h = h.name . equals_ignore_case Header.content_type_header_name

    # Check for content type and encoding in the Request_Body.
    request_body_content_type_header = case req.body of
        Request_Body.Text _ request_body_encoding request_body_content_type ->
            if request_body_content_type.is_nothing && request_body_encoding.is_nothing then Nothing else
                content_type = request_body_content_type.if_nothing "text/plain"
                encoding = request_body_encoding.if_nothing Encoding.utf_8
                Header.content_type content_type encoding=encoding
        _ -> Nothing

    ## Raise error if content type is specified in both the request body and
       header list; otherwise, add any Request_Body settings to the header list.
    has_content_type_header_in_list = req.headers.any is_content_type_header

    content_type_additions = case request_body_content_type_header.is_nothing.not && has_content_type_header_in_list of
        True -> Error.throw (Illegal_Argument.Error "Cannot specify Content-Type/encoding in both the request body and request headers")
        False ->
            if request_body_content_type_header.is_nothing then [] else [request_body_content_type_header]

    content_type_additions.if_not_error <|
        all_headers = req.headers + content_type_additions

        # Add default content type, if one is not specified and the body is not Request_Body.Empty.
        contains_content_type = all_headers.any is_content_type_header
        is_body_empty = case req.body of
            Request_Body.Empty -> True
            _ -> False
        default_content_type = if is_body_empty || contains_content_type then [] else
            default = req.body.default_content_type_header
            if default.is_nothing then [] else [default]

        all_headers + default_content_type

## PRIVATE
   Generate body publisher and optional form content boundary
resolve_body_to_publisher_and_boundary : Request_Body -> Pair BodyPublisher Text
resolve_body_to_publisher_and_boundary body:Request_Body =
    body_publishers = HttpRequest.BodyPublishers
    case body of
        Request_Body.Text text encoding _ ->
            body_publisher = case encoding of
                Nothing -> body_publishers.ofString text
                _ : Encoding ->  body_publishers.ofString text encoding.to_java_charset
            Pair.new body_publisher Nothing
        Request_Body.Json x ->
            json = x.to_json
            json.if_not_error <|
                Pair.new (body_publishers.ofString json) Nothing
        Request_Body.Binary file ->
            path = File_Utils.toPath file.path
            Pair.new (body_publishers.ofFile path) Nothing
        Request_Body.Form_Data form_data url_encoded ->
            build_form_body_publisher form_data url_encoded
        Request_Body.Empty ->
            Pair.new (body_publishers.noBody) Nothing
        _ ->
            Error.throw (Illegal_Argument.Error ("Unsupported POST body: " + body.to_display_text + "; this is a bug in the Data library"))


## PRIVATE

   Build a BodyPublisher from the given form data.
   The pair's second value is a content boundary in the case of a `multipart/form-data` form; otherwise, Nothing
build_form_body_publisher : Dictionary Text (Text | File) -> Boolean -> Pair BodyPublisher Text
build_form_body_publisher (form_data:(Dictionary Text (Text | File))) (url_encoded:Boolean=False) = case url_encoded of
    True ->
        body_builder = UrlencodedBodyBuilder.new
        form_data.map_with_key key-> value->
            case value of
                _ : Text -> body_builder.add_part_text key value
                _ : File -> body_builder.add_part_file key value.path
        Pair.new body_builder.build Nothing
    False ->
        body_builder = MultipartBodyBuilder.new
        form_data.map_with_key key-> value->
            case value of
                _ : Text -> body_builder.add_part_text key value
                _ : File -> body_builder.add_part_file key value.path
        boundary = body_builder.get_boundary
        Pair.new body_builder.build boundary

## PRIVATE
fetch_methods : Hashset HTTP_Method
fetch_methods = Hashset.from_vector [HTTP_Method.Get, HTTP_Method.Head, HTTP_Method.Options]

## PRIVATE
post_methods : Hashset HTTP_Method
post_methods = Hashset.from_vector [HTTP_Method.Post, HTTP_Method.Put, HTTP_Method.Patch, HTTP_Method.Delete]

## PRIVATE
check_method : Hashset HTTP_Method -> Any -> Any -> Any ! Illegal_Argument
check_method allowed_methods method ~action =
    if allowed_methods.contains method then action else
        Error.throw (Illegal_Argument.Error ("Unsupported method " + method.to_display_text))

## PRIVATE
   An error when sending an HTTP request.

   Arguments:
   - error_type: The type of the error.
   - message: The message for the error.
type Request_Error
    ## PRIVATE
    Error error_type message

    ## PRIVATE
       Convert a request error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        description_text = case self.message of
            Nothing -> ""
            _ -> " " + self.message
        self.error_type + " error when sending request." + description_text
