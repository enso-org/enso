import project.Any.Any
import project.Data.Dictionary.Dictionary
import project.Data.Hashset.Hashset
import project.Data.Pair.Pair
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Time.Duration.Duration
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Enso_Cloud.Enso_Secret.Enso_Secret
import project.Error.Error
import project.Errors.Common.Forbidden_Operation
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Unimplemented.Unimplemented
import project.Function.Function
import project.Meta
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP_Error.HTTP_Error
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.HTTP_Version.HTTP_Version
import project.Network.HTTP.Request.Request
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.HTTP.Response.Response
import project.Network.Proxy.Proxy
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Context
import project.System.File.File
from project.Data.Boolean import Boolean, False, True
from project.Data.Json.Extensions import all
from project.Data.Text.Extensions import all

polyglot java import java.lang.IllegalArgumentException
polyglot java import java.io.IOException
polyglot java import java.net.http.HttpClient
polyglot java import java.net.http.HttpClient.Builder as ClientBuilder
polyglot java import java.net.http.HttpClient.Redirect
polyglot java import java.net.http.HttpClient.Version
polyglot java import java.net.http.HttpRequest
polyglot java import java.net.http.HttpRequest.BodyPublisher
polyglot java import java.net.http.HttpRequest.BodyPublishers
polyglot java import java.net.http.HttpRequest.Builder
polyglot java import java.net.InetSocketAddress
polyglot java import java.net.ProxySelector
polyglot java import javax.net.ssl.SSLContext
polyglot java import org.enso.base.enso_cloud.EnsoSecretHelper
polyglot java import org.enso.base.file_system.File_Utils
polyglot java import org.enso.base.net.http.MultipartBodyBuilder
polyglot java import org.enso.base.net.http.UrlencodedBodyBuilder

type HTTP
    ## PRIVATE
       Static helper for get-like methods
    fetch : (URI | Text) -> HTTP_Method -> Vector (Header | Pair Text Text) -> Response ! Request_Error | HTTP_Error
    fetch (uri:(URI | Text)) (method:HTTP_Method=..Get) (headers:(Vector (Header | Pair Text Text))=[]) = if_fetch_method method <|
        request = Request.new method uri (Header.unify_vector headers) Request_Body.Empty
        HTTP.new.request request

    ## PRIVATE
       Static helper for post-like methods
    post : (URI | Text) -> Request_Body -> HTTP_Method -> Vector (Header | Pair Text Text) -> Response ! Request_Error | HTTP_Error
    post (uri:(URI | Text)) (body:Request_Body=Request_Body.Empty) (method:HTTP_Method=HTTP_Method.Post) (headers:(Vector (Header | Pair Text Text))=[]) = if_post_method method <|
        request = Request.new method uri (Header.unify_vector headers) body
        HTTP.new.request request

    ## PRIVATE
       ADVANCED
       Create a new instance of the HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.

       > Example
         Create an HTTP client with default settings.
             HTTP.new

       > Example
         Create an HTTP client with extended timeout.
             HTTP.new timeout=(Duration.new seconds=30)

       > Example
         Create an HTTP client with extended timeout and proxy settings.

             import Standard.Base.Data.Time.Duration.Duration
             import Standard.Base.Network.HTTP.HTTP
             import Standard.Base.Network.Proxy.Proxy

             example_new =
                HTTP.new (timeout = (Duration.new seconds=30)) (proxy = Proxy.Address "example.com" 8080)
    new : Duration -> Boolean -> Proxy -> HTTP_Version -> HTTP
    new (timeout:Duration=(Duration.new seconds=10)) (follow_redirects:Boolean=True) (proxy:Proxy=..System) (version:HTTP_Version=..HTTP_2) =
        HTTP.Value timeout follow_redirects proxy version Nothing

    ## PRIVATE
       An HTTP client.

       Arguments:
       - timeout: The length of time the client will wait for responses.
       - follow_redirects: Whether or not the client should follow redirects.
       - proxy: The proxy that the client should use, if any.
       - version: The HTTP version supported by the client.
       - custom_ssl_context: A custom SSL context to use for requests, or
         Nothing if the default should be used. For most use cases, it is
         recommended to use the default.
       - hash_method: The hash method to use for body hashing.
       - make_client: Creates the Java HTTPClient.
    private Value timeout follow_redirects:Boolean proxy:Proxy version:HTTP_Version custom_ssl_context hash_method=Nothing make_client=internal_http_client

    ## ADVANCED
       ICON data_download
       Sends a request using the HTTP client.
       The response body will contain a raw Input_Stream which can be read once.
       Please note, this must be closed after use (either directly or via the
       helpers on Response_Body).

       Arguments:
       - req: The HTTP request to send using `self` HTTP client.
       - error_on_failure_code: Whether or not to throw an error if the response
         code is not a success code.
    request : Request -> Boolean -> Response ! Request_Error | HTTP_Error | Illegal_Argument
    request self req error_on_failure_code=True =
        # Prevent request if the method is a write-like method and output context is disabled.
        check_output_context ~action =
            if (if_fetch_method req.method True if_not=Context.Output.is_enabled) then action else
                Error.throw (Forbidden_Operation.Error ("As writing is disabled, " + req.method.to_text + " request not sent. Press the Write button â–¶ to send it."))
        handle_request_error =
            handler caught_panic =
                exception = caught_panic.payload
                Error.throw (Request_Error.Error (Meta.type_of exception . to_text) exception.getMessage)
            Panic.catch IllegalArgumentException handler=handler <| Panic.catch IOException handler=handler

        handle_request_error <| Illegal_Argument.handle_java_exception <| check_output_context <|
            headers = _resolve_headers req
            headers.if_not_error <|
                resolved_body = _resolve_body req.body self.hash_method
                resolved_body.if_not_error <|
                    # Create builder and set method and body
                    builder = HttpRequest.newBuilder
                    builder.method req.method.to_http_method_name resolved_body.publisher

                    # Create Unified Header list
                    boundary_header_list = if resolved_body.boundary.is_nothing then [] else [Header.multipart_form_data resolved_body.boundary]
                    all_headers = headers + boundary_header_list
                    mapped_headers = all_headers.map on_problems=No_Wrap .to_java_pair

                    response = Response.Value (EnsoSecretHelper.makeRequest (self.make_client self resolved_body.hash) builder req.uri.to_java_representation mapped_headers)
                    if error_on_failure_code.not || response.code.is_success then response else
                        body = response.body.decode_as_text.catch Any _->""
                        message = if body.is_empty then Nothing else body
                        Error.throw (HTTP_Error.Status_Error response.code message response.uri)

    ## PRIVATE
       ADVANCED
       Create a copy of the HTTP client with a custom SSL context.
    set_custom_ssl_context : SSLContext -> HTTP
    set_custom_ssl_context self ssl_context =
        HTTP.Value self.timeout self.follow_redirects self.proxy self.version ssl_context

## PRIVATE
   If either encoding or content type is specified in the Request_Body, that is used as the content type header.
   If encoding is specified without content type, "text/plain" is used as the content type.
   It is an error to specify the content type in both the request body and the header list.
   If the body is not Request_Body.Empty, and no content type is specified, a default is used.
_resolve_headers : Request -> Vector Header
private _resolve_headers req =
    is_content_type_header h = h.name . equals_ignore_case Header.content_type_header_name

    # Check for content type and encoding in the Request_Body.
    request_body_content_type_header = case req.body of
        Request_Body.Text _ request_body_encoding request_body_content_type ->
            if request_body_content_type.is_nothing && request_body_encoding.is_nothing then Nothing else
                content_type = request_body_content_type.if_nothing "text/plain"
                encoding = request_body_encoding.if_nothing Encoding.utf_8
                Header.content_type content_type encoding=encoding
        _ -> Nothing

    ## Raise error if content type is specified in both the request body and
       header list; otherwise, add any Request_Body settings to the header list.
    has_content_type_header_in_list = req.headers.any is_content_type_header

    content_type_additions = case request_body_content_type_header.is_nothing.not && has_content_type_header_in_list of
        True -> Error.throw (Illegal_Argument.Error "Cannot specify Content-Type/encoding in both the request body and request headers")
        False ->
            if request_body_content_type_header.is_nothing then [] else [request_body_content_type_header]

    content_type_additions.if_not_error <|
        all_headers = req.headers + content_type_additions

        # Add default content type, if one is not specified and the body is not Request_Body.Empty.
        contains_content_type = all_headers.any is_content_type_header
        is_body_empty = case req.body of
            Request_Body.Empty -> True
            _ -> False
        default_content_type = if is_body_empty || contains_content_type then [] else
            default = req.body.default_content_type_header
            if default.is_nothing then [] else [default]

        all_headers + default_content_type

## PRIVATE
type Resolved_Body
    private Value publisher:BodyPublisher boundary:Text|Nothing hash:Text|Nothing

## PRIVATE
   Generate body publisher, optional form content boundary and optionally hash from the body
_resolve_body : Request_Body -> Function | Nothing -> Resolved_Body
private _resolve_body body:Request_Body hash_function =
    body_publishers = HttpRequest.BodyPublishers
    case body of
        Request_Body.Text text encoding _ ->
            body_publisher = case encoding of
                Nothing -> body_publishers.ofString text
                _ : Encoding ->  body_publishers.ofString text encoding.to_java_charset
            hash = if hash_function.is_nothing then "" else hash_function (text.bytes (encoding.if_nothing Encoding.utf_8))
            Resolved_Body.Value body_publisher Nothing hash
        Request_Body.Json x ->
            json = x.to_json
            hash = if hash_function.is_nothing then "" else hash_function json.bytes
            json.if_not_error <| Resolved_Body.Value (body_publishers.ofString json) Nothing hash
        Request_Body.Binary file ->
            path = File_Utils.toPath file.path
            ## ToDo: Support hashing a file.
            hash = if hash_function.is_nothing then "" else Unimplemented.throw "Hashing a file body is not yet supported."
            Resolved_Body.Value (body_publishers.ofFile path) Nothing hash
        Request_Body.Form_Data form_data url_encoded ->
            _resolve_form_body form_data url_encoded hash_function
        Request_Body.Empty ->
            hash = if hash_function.is_nothing then "" else hash_function []
            Resolved_Body.Value body_publishers.noBody Nothing hash
        _ ->
            Error.throw (Illegal_Argument.Error ("Unsupported POST body: " + body.to_display_text + "; this is a bug library."))

## PRIVATE
   Build a BodyPublisher from the given form data.
   The pair's second value is a content boundary in the case of a `multipart/form-data` form; otherwise, Nothing
_resolve_form_body : Dictionary Text (Text | File) -> Boolean -> Function | Nothing -> Resolved_Body
private _resolve_form_body (form_data:(Dictionary Text (Text | File))) (url_encoded:Boolean=False) hash_function = case url_encoded of
    True ->
        body_builder = UrlencodedBodyBuilder.new
        form_data.map_with_key key-> value->
            case value of
                _ : Text -> body_builder.add_part_text key value
                _ : File -> body_builder.add_part_file key value.path
        publisher = body_builder.build
        hash = if hash_function.is_nothing then "" else hash_function body_builder.getContents.bytes
        Resolved_Body.Value publisher Nothing hash
    False ->
        body_builder = MultipartBodyBuilder.new
        form_data.map_with_key key-> value->
            case value of
                _ : Text -> body_builder.add_part_text key value
                _ : File -> body_builder.add_part_file key value.path
        ## ToDo: Support hashing a MultipartBodyBuilder.
        hash = if hash_function.is_nothing then "" else Unimplemented.throw "Hashing a multi-part body is not yet supported."
        Resolved_Body.Value body_builder.build body_builder.get_boundary hash

## PRIVATE
if_fetch_method : HTTP_Method -> Function -> Any -> Any ! Illegal_Argument
if_fetch_method method:HTTP_Method ~action ~if_not=(Error.throw (Illegal_Argument.Error ("Unsupported method " + method.to_display_text))) =
    if [HTTP_Method.Get, HTTP_Method.Head, HTTP_Method.Options].contains method then action else
        if_not

## PRIVATE
if_post_method : HTTP_Method -> Function -> Any -> Any ! Illegal_Argument
if_post_method method:HTTP_Method ~action ~if_not=(Error.throw (Illegal_Argument.Error ("Unsupported method " + method.to_display_text))) =
    if [HTTP_Method.Post, HTTP_Method.Put, HTTP_Method.Patch, HTTP_Method.Delete].contains method then action else
        if_not

## PRIVATE
   Build a custom HTTP with hash function and make_client function.
with_hash_and_client : HTTP -> Function -> Function -> HTTP
with_hash_and_client http hash_method make_client =
    HTTP.Value http.timeout http.follow_redirects http.proxy http.version http.custom_ssl_context hash_method make_client

## PRIVATE
   Build an HTTP client.
internal_http_client : HTTP -> Text -> HttpClient
internal_http_client http hash =
    _ = hash
    builder = HttpClient.newBuilder.connectTimeout http.timeout

    redirect_policy = if http.follow_redirects then HttpClient.Redirect.ALWAYS else HttpClient.Redirect.NEVER
    builder.followRedirects redirect_policy

    case http.proxy of
        Proxy.Address proxy_host proxy_port -> builder.proxy (ProxySelector.of (InetSocketAddress.new proxy_host proxy_port))
        Proxy.System -> builder.proxy ProxySelector.getDefault
        Proxy.None -> Nothing

    case http.version of
        HTTP_Version.HTTP_1_1 -> builder.version HttpClient.Version.HTTP_1_1
        HTTP_Version.HTTP_2 -> builder.version HttpClient.Version.HTTP_2

    if http.custom_ssl_context.is_nothing.not then
        builder.sslContext http.custom_ssl_context

    builder.build

## PRIVATE
   An error when sending an HTTP request.

   Arguments:
   - error_type: The type of the error.
   - message: The message for the error.
type Request_Error
    ## PRIVATE
    Error error_type message

    ## PRIVATE
       Convert a request error to a human-readable form.
    to_display_text : Text
    to_display_text self =
        description_text = case self.message of
            Nothing -> ""
            _ -> " " + self.message
        self.error_type + " error when sending request." + description_text
