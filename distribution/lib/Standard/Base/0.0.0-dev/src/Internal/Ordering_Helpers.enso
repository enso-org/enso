private

import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Numbers.Positive_Integer
import project.Error.Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Common.Type_Error
import project.Meta
import project.Meta.Atom
import project.Nothing.Nothing
import project.Panic.Panic
from project.Data.Boolean import Boolean, False, True
from project.Data.Ordering import all
from project.Function import identity

## PRIVATE
   Default implementation of a _comparator_.
@Builtin_Type
type Default_Comparator
    ## PRIVATE
    compare : Any -> Any -> (Ordering|Nothing)
    compare x y =
        case Any.== x y of
            True -> Ordering.Equal
            False ->
                case Default_Comparator.less_than_builtin x y of
                    Nothing -> Nothing
                    True -> Ordering.Less
                    False ->
                        case Default_Comparator.less_than_builtin y x of
                            Nothing -> Nothing
                            True -> Ordering.Greater
                            False -> Nothing

    ## PRIVATE
    hash : Number -> Integer
    hash x = Default_Comparator.hash_builtin x

    ## PRIVATE
    private hash_builtin x = @Builtin_Method "Default_Comparator.hash_builtin"

    ## PRIVATE
    private less_than_builtin left right = @Builtin_Method "Default_Comparator.less_than_builtin"

    ## PRIVATE
       Called as a callback from internal engine code for an atom with a custom
       comparator. It is assumed that the given atom has a custom comparator, that is
       a comparator different than `Default_Comparator`.
    hash_callback : Atom -> Integer
    hash_callback atom = Ordering.hash atom

    ## PRIVATE
       A callback allowing to compare two atoms with a custom comparator.
    compare_callback : Atom -> Atom -> Integer | Nothing
    compare_callback atom that =
        ordering = Ordering.compare atom that
        if ordering.is_error then Nothing else ordering.to_sign


## PRIVATE
   Checks if the comparators for the given objects are both of the same type. If so,
   proceeds with the given action, and if not, throws `Incomparable_Values` error.
assert_same_comparators : Any -> Any -> (Any -> Any) -> Any ! Incomparable_Values
assert_same_comparators this that ~action =
    comp_this = Comparable.from this
    comp_that = Comparable.from that
    case Meta.is_same_object comp_this.comparator comp_that.comparator of
        True -> action comp_this.comparator
        False -> Error.throw (Incomparable_Values.Error this that)

compare_with_comparators this that -> Ordering ! Incomparable_Values =
    yield_an_error _ = Error.throw (Incomparable_Values.Error this that)
    Panic.catch Type_Error handler=yield_an_error <|
        comp_this = Comparable.from this
        comp_that = Comparable.from that

        any_result = if Meta.is_same_object comp_this.comparator comp_that.comparator then
            comp_this.comparator.compare comp_this.value comp_that.value

        result = any_result:Ordering
        result

## PRIVATE
type Positive_Integer_Comparator
    ## PRIVATE
    compare x:Positive_Integer y:Positive_Integer =
        Ordering.compare x.integer y.integer

    ## PRIVATE
    hash x:Positive_Integer = Ordering.hash x.integer

## PRIVATE
type Ordering_Comparator
    ## PRIVATE
    compare x:Ordering y:Ordering = if Meta.is_same_object x y then Ordering.Equal else
        if Meta.is_same_object x Ordering.Equal . not then x else
            if Meta.is_same_object y Ordering.Less then Ordering.Greater else
                Ordering.Less

    ## PRIVATE
    hash x:Ordering = x.to_sign
