import project.Any.Any
import project.Data.Pair.Pair
import project.Data.Text.Encoding.Encoding
import project.Data.Text.Text
import project.Data.Vector.Vector
import project.Enso_Cloud.Data_Link.Data_Link
import project.Enso_Cloud.Data_Link_Helpers
import project.Error.Error
import project.Errors.Common.Missing_Argument
import project.Errors.File_Error.File_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Errors.Problem_Behavior.Problem_Behavior
import project.Internal.Data_Read_Helpers
import project.Meta
import project.Network.HTTP.Header.Header
import project.Network.HTTP.HTTP
import project.Network.HTTP.HTTP_Error.HTTP_Error
import project.Network.HTTP.HTTP_Method.HTTP_Method
import project.Network.HTTP.Request_Body.Request_Body
import project.Network.HTTP.Request_Error
import project.Network.URI.URI
import project.Nothing.Nothing
import project.Runtime.Context
import project.System.File.File
import project.System.File.Generic.Writable_File.Writable_File
from project.Data.Boolean import Boolean, False, True
from project.Meta.Enso_Project import enso_project
from project.Metadata.Choice import Option
from project.Metadata.Widget import Folder_Browse, Text_Input
from project.System.File_Format import Auto_Detect, File_Format

## ALIAS load, open
   GROUP Input
   ICON data_input
   Reads a file into Enso.
   Uses the specified file format to parse the file into an Enso type. If not
   specified will use the file's extension to determine the file format.

   Arguments:
   - path: The path to the file to read. If the path is a URI, then the data
     will be fetched if from a supported protocol.
   - format: A `File_Format` object used to read file into memory.
     If `Auto_Detect` is specified; the provided file determines the specific
     type and configures it appropriately. If there is no matching type then
     a `File_Error.Unsupported_Type` error is returned.
     You can use `File_Format.all` to get a list of currently loaded
     formats.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   > Example
     Read the first sheet of an XLSX from disk and convert it into a table.

         from Standard.Table import all
         import Standard.Examples

         example_xlsx_to_table = Data.read Examples.xlsx

   > Example
     Read the sheet named `Dates` from an XLS and convert it to a table.

         from Standard.Table import all
         import Standard.Examples

         example_xls_to_table = Data.read Examples.xls (..Sheet 'Dates')
@path Text_Input
@format File_Format.default_widget
read : Text | URI | File -> File_Format -> Problem_Behavior -> Any ! File_Error
read path=(Missing_Argument.throw "path") format=Auto_Detect (on_problems : Problem_Behavior = ..Report_Warning) = case path of
    _ : Text -> if Data_Read_Helpers.looks_like_uri path then Data_Read_Helpers.fetch_following_data_links path format=format else
        read (File.new path) format on_problems
    uri : URI -> Data_Read_Helpers.fetch_following_data_links uri format=format
    _ ->
        file_obj = File.new path
        if file_obj.is_directory then Error.throw (Illegal_Argument.Error "Cannot `read` a directory, use `Data.list`.") else
            file_obj.read format on_problems

## ALIAS load text, open text
   GROUP Input
   ICON data_input
   Open and read the file at the provided `path`.

   Arguments:
   - path: The path of the file to open and read the contents of. It will
     accept a textual path or a file.
   - encoding: The text encoding to decode the file with. Defaults to UTF-8.
   - on_problems: Specifies the behavior when a problem occurs during the
     function.
     By default, a warning is issued, but the operation proceeds.
     If set to `Report_Error`, the operation fails with a dataflow error.
     If set to `Ignore`, the operation proceeds without errors or warnings.

   > Example
     Read the `data.csv` file in the project directory's `data` directory. You
     will need to create the file `data.csv` manually in that directory.

         import Standard.Base.Data
         import Standard.Examples

         example_read = Data.read_text Examples.csv_path
@path Text_Input
@encoding Encoding.default_widget
read_text : (Text | File) -> Encoding -> Problem_Behavior -> Text
read_text path=(Missing_Argument.throw "path") (encoding : Encoding = Encoding.default) (on_problems : Problem_Behavior = ..Report_Warning) =
    File.new path . read_text encoding on_problems

## GROUP Input
   ICON data_input
   Lists files contained in the provided directory.

   Arguments:
   - name_filter: A glob pattern that can be used to filter the returned files.
     If it is not specified, all files are returned.
   - recursive: Specifies whether the returned list of files should include also
     files from the subdirectories. If set to `False` (the default), only the
     immediate children of the listed directory are considered.

   The `name_filter` can contain the following special characters:
   - `"?"` - which matches a single filename character (so it will not match a
     `"/"`).
   - `"*"` - which matches any number of characters, but again does not cross
     directories.
   - `"**"` - which matches any number of characters and can cross directories.
   - `"\"` - can be used to escape the characters with special meaning; to get a
     single backslash, you need to specify it twice; you also need to keep in
     mind that the interpolating string literal also uses `"\"` as an escape
     sequence, so you need to type `'\\\\'` to get a single backslash for the
     glob pattern, unless you use the raw strings, where you only need to escape
     once: `"\\"`.
   - Brackets can be used to match exactly one character from some set of
     characters. For example `"[xy]"` matches `"x"` or `"y"`. Character ranges
     can also be specified: `"[a-z]"` matches any character from `"a"` to `"z"`.
     An exclamation mark can be used to negate the match, i.e. `"[!xz]"` will
     match any characters except for `"x"` and `"z"`. Moreover the ranges and
     single characters can be used together, so for example `"[a-cxy]"` will
     match `"a"`, `"b"`, `"c"`, `"x"` or `"y"`. Within the brackets, the special
     characters `"*"`, `"?"` and `"\"` stand for themselves instead of their
     special meanings.
   - Braces allow to specify multiple patterns (separated with a comma), one of
     which must be matched. For example: `"{abc,x*}"` will match either the name
     `"abc"` or any name starting with `"x"`. The groups cannot be nested.

   Keep in mind that if `recursive` is set to True and a `name_filter` is used,
   the function will return files from subdirectories only if the set
   `name_filter` allows crossing directories. So even with `recursive=True` a
   filter `"*.txt"` will only return files that are immediate children of the
   listed directory, to list files recursively you need to use a filter like
   `"**.txt"` or `"*/*"` (which will match only files that are exactly one
   directory down from the listed directory) or no filter at all.

   > Example
     List all files with `.md` extension in the example directory and any of its
     subdirectories.

         import Standard.Examples

         example_list_files =
             Data.list Examples.data_dir name_filter="**.md" recursive=True
@directory Folder_Browse
list : Text | File -> Text -> Boolean -> Vector File
list (directory:(Text | File)=enso_project.root) (name_filter:Text="") recursive:Boolean=False =
    file_obj = File.new directory
    if file_obj.is_directory.not then Error.throw (Illegal_Argument.Error "Cannot `list` a non-directory.") else
        file_obj.list name_filter=name_filter recursive=recursive

## ALIAS download, http get
   GROUP Input
   ICON data_input
   Fetches from the provided URI and returns the response, parsing the body if
   the content-type is recognised. Returns an  error if the status code does not
   represent a successful response.

   Arguments:
   - uri: The URI to fetch.
   - method: The HTTP method to use. Must be one of `HTTP_Method.Get`,
     `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.
     Defaults to `HTTP_Method.Get`.
   - headers: The headers to send with the request. Defaults to an empty vector.
   - format: The format to use for interpreting the response.
     Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format
     cannot be determined automatically, a raw HTTP `Response` will be returned.

   > Example
     Read from an HTTP endpoint.

         import Standard.Base.Data
         response = Data.fetch URL

   > Example
     Read from an HTTP endpoint and write the results to a file.

         import Standard.Base.Data
         file = enso_project.data / "spreadsheet.xls"
         Data.fetch URL . body . write file
@uri (Text_Input display=..Always)
@format Data_Read_Helpers.format_widget_with_raw_response
@headers Header.default_widget
fetch : (URI | Text) -> HTTP_Method -> Vector (Header | Pair Text Text) -> File_Format -> Any ! Request_Error | HTTP_Error
fetch (uri:(URI | Text)=(Missing_Argument.throw "uri")) (method:HTTP_Method=..Get) (headers:(Vector (Header | Pair Text Text))=[]) (format = Auto_Detect) =
    Data_Read_Helpers.fetch_following_data_links uri method headers (Data_Read_Helpers.handle_legacy_format "fetch" "format" format)

## ALIAS http post, upload
   GROUP Output
   ICON data_upload
   Writes the provided data to the provided URI. Returns the response,
   parsing the body if the content-type is recognised. Returns an  error if the
   status code does not represent a successful response.

   Arguments:
   - uri: The URI to fetch.
   - body: The data to write. See `Supported Body Types` below.
   - method: The HTTP method to use. Must be one of `HTTP_Method.Post`,
     `HTTP_Method.Put`, `HTTP_Method.Patch`. Defaults to `HTTP_Method.Post`.
   - headers: The headers to send with the request. Defaults to an empty vector.
   - response_format: The format to use for interpreting the response.
     Defaults to `Auto_Detect`. If `Raw_Response` is selected or if the format
     cannot be determined automatically, a raw HTTP `Response` will be returned.

   ! Supported Body Types

     - Request_Body.Text: Sends a text string, with optional encoding and content
       type.
     - Request_Body.Json: Sends an Enso object, after converting it to JSON.
     - Request_Body.Binary: Sends a file.
     - Request_Body.Form_Data: Sends a form encoded as key/value pairs. The keys
       must be `Text`, and the values must be `Text` or `File`.
     - Request_Body.Empty: Sends an empty body.

     Additionally, the following types are allowed as the `body` parameter:

     - Text: shorthand for `Request_Body.Text that_text`.
     - File: shorthand for `Request_Body.Binary that_file`.
     - Any other Enso object: shorthand for `Request_Body.Json that_object`.

   ! Specifying Content Types

     If the `body` parameter specifies an explicit content type, then it is an
     error to also specify additional `Content-Type` headers in the `headers`
     parameter. (It is not an error to specify multiple `Content-Type` values in
     `headers`, however.)

   ! Default Content Types

     The following specifies the default content type for each `Request_Body`
     type.

     - Request_Body.Text: `text/plain`
     - Request_Body.Json: `application/json`
     - Request_Body.Binary: `application/octet-stream`
     - Request_Body.Form_Data:
           If `url_encoded` is True: `application/x-www-form-urlencoded`
           If `url_encoded` is False: `multipart/form-data`
     - Request_Body.Empty: No content type is sent
     - Text: `text/plain`
     - File: `application/octet-stream`
     - Any other Enso object: `application/json`

   ! Specifying Text Encodings

     Text encoding can be specified in the `encoding` parameter to the
     `Request_Body.Text` constructor. This value will be added to the
     `Content-Type` header.

     If a value for `encoding` is specified, but no value for `content_type` is
     specified, then `"text/plain"` is used as the content type.

   > Example
     Write a text string to an HTTP endpoint.

         import Standard.Base.Data
         response = Data.post url_post (Request_Body.Text "hello world")

   > Example
     Write JSON to an HTTP endpoint.

         import Standard.Base.Data
         json = Json.parse '{"a": "asdf", "b": 123}'
         response = Data.post url_post json

   > Example
     Write an Enso object to an HTTP endpoint.

         import Standard.Base.Data
         response = Data.post url_post (My_Type.Value 12)

   > Example
     Write a text string to an HTTP endpoint, with a specific text encoding.

         import Standard.Base.Data
         body = Request_Body.Text 'Hello World!' encoding=Encoding.utf_16_le
         response = Data.post url_post body

   > Example
     Write a text string to an HTTP endpoint, with a specific content type.

         import Standard.Base.Data
         body = Request_Body.Text 'a,b,c\n' content_type="text/csv"
         response = Data.post url_post body

   > Example
     Write the contents of a file to an HTTP endpoint.

         import Standard.Base.Data
         test_file = enso_project.data / "sample.png"
         response = Data.post url_post (Request_Body.Binary test_file)

   > Example
     Write a multipart form to an HTTP endpoint.

         import Standard.Base.Data
         test_file = enso_project.data / "sample.png"
         form_data = Dictionary.from_vector [["key", "val"], ["a_file", test_file]]
         response = Data.post url_post (Request_Body.Form_Data form_data)

   > Example
     Write a URL-encoded form to an HTTP endpoint.

         import Standard.Base.Data
         test_file = enso_project.data / "sample.txt"
         form_data = Dictionary.from_vector [["key", "val"], ["a_file", test_file]]
         response = Data.post url_post (Request_Body.Form_Data form_data url_encoded=True)
@uri (Text_Input display=..Always)
@headers Header.default_widget
@response_format Data_Read_Helpers.format_widget_with_raw_response
post : (URI | Text) -> Request_Body -> HTTP_Method -> Vector (Header | Pair Text Text) -> File_Format -> Any ! Request_Error | HTTP_Error
post (uri:(URI | Text)=(Missing_Argument.throw "uri")) (body:Request_Body=..Empty) (method:HTTP_Method=..Post) (headers:(Vector (Header | Pair Text Text))=[]) (response_format = Auto_Detect) =
    response = HTTP.post uri body method headers
    Data_Read_Helpers.decode_http_response_following_data_links response (Data_Read_Helpers.handle_legacy_format "post" "response_format" response_format)

## GROUP Input
   ICON select_column
   Fetches from the provided URI and if successful writes to the file. Returns
   an error if the status code does not represent a successful response.

   Arguments:
   - uri: The URI to fetch.
   - file: The file to write the response to.
   - method: The HTTP method to use. Must be one of `HTTP_Method.Get`,
     `HTTP_Method.Head`, `HTTP_Method.Delete`, `HTTP_Method.Options`.
     Defaults to `HTTP_Method.Get`.
   - headers: The headers to send with the request. Defaults to an empty vector.
@uri (Text_Input display=..Always)
@headers Header.default_widget
download : (URI | Text) -> Writable_File -> HTTP_Method -> Vector (Header | Pair Text Text) -> File ! Request_Error | HTTP_Error
download (uri:(URI | Text)=(Missing_Argument.throw "uri")) file:Writable_File (method:HTTP_Method=..Get) (headers:(Vector (Header | Pair Text Text))=[]) =
    Context.Output.if_enabled disabled_message="As writing is disabled, cannot download to a file. Press the Write button ▶ to perform the operation." panic=False <|
        response = HTTP.fetch uri method headers
        case Data_Link.is_data_link response.body.metadata of
            True ->
                # If the resource was a data link, we follow it, download the target data and try to write it to a file.
                data_link = Data_Link_Helpers.interpret_json_as_data_link response.decode_as_json
                Data_Link_Helpers.save_data_link_to_file data_link file
            False ->
                response.write file

## If the `format` is set to `Raw_Response`, a raw HTTP `Response` is returned
   that can be then processed further manually.
type Raw_Response
    ## PRIVATE
    get_dropdown_options : Vector Option
    get_dropdown_options = [Option "Raw HTTP Response" (Meta.get_qualified_type_name Raw_Response)]
