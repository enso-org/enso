import project.Any.Any
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Error.Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Illegal_State.Illegal_State
import project.Errors.Unimplemented.Unimplemented
import project.Meta
import project.Meta.Atom
import project.Nothing.Nothing
from project.Data.Boolean import Boolean, False, True
from project.Internal.Ordering_Helpers import all

## Provides custom ordering, equality check and hash code for types that need it.

   The Enso runtime system offers default implementation of _equality_
   as well as capability to _compute hash code_ (e.g. for use in `Dictionary`) automatically.
   The default implementation is sufficient for most of the programming activities.
   Especially when defining new type and its constructors, they get sensible
   implementation of both functions.

   Should there be a need to redefine the default implementation, here is a way:
   Define conversion function `Comparable.from` for your `type` and return pointer to
   another `type` that satisfies the following definition:

   ```
   type T_Comparator T
       compare : T -> T -> (Ordering|Nothing) ! Incomparable_Values
       hash : T -> Integer

   Comparable.from (that:T) = Comparable.new that T_Comparator
   ```

   Every type must provide exactly one comparator, i.e., the method of form
   `Comparable.from (that:My_Type)` must return the same comparator type for every
   value. Note that there is an implicit `Default_Comparator` assigned for every
   type by default.

   A comparator has to implement `compare` and `hash` methods. `compare x y` method
   returns `Ordering.Less` if x is ordered before y, `Ordering.Equal` if x is equal
   to y, `Ordering.Greater` if x is ordered after y, and `Nothing`
   (or `Error.throw (Incomparable_Values x y)` if preferred)
   if x and y are not equal, and their relative ordering cannot be determined.

   The signature of the `compare` method is designed so that it enables comparators
   to provide a _partial ordering_ for a specific type.

   A hash code must be provided for all the objects, therefore, the type signature
   of `hash` method does not allow `Nothing` as a return value.

   The runtime expects the following semantics for all the comparators:
   - Hash consistency:
     - If x == y then hash(x) == hash(y)
     - If hash(x) != hash(y) then x != y
   - Consistency: if x == y then x == y for all the subsequent invocations.
   - Symmetry: if x == y then y == x
   - Reflexivity: x == x
   - Transitivity: if x < y and y < z then x < z
   - Antisymmetry: if x > y then y < x

   Users are responsible for the compliance to the aforementioned semantics.
   Should the semantics be violated, an unexpected behavior may be encountered, e.g.,
   `Array.sort` may return unexpected results or fail with `Incomparable_Values`.


   > Example
       Comparator for an unordered Pair `UPair`. In this example, we can see an
       implementation of the `hash` method that delegates to hash methods of
       fields.

       ```
       type UPair
           Value x y

       type UPair_Comparator
           compare pair1:UPair pair2:UPair =
               if pair1.x == pair2.x && pair1.y == pair2.y then Ordering.Equal else
                   if pair1.x == pair2.y && pair1.y == pair2.x then Ordering.Equal else
                       Nothing

           hash upair:UPair =
               x_comp = Comparable.from upair.x
               y_comp = Comparable.from upair.y
               (x_comp.hash upair.x) + (y_comp.hash upair.y)

       Comparable.from (that : UPair) = Comparable.new that UPair_Comparator
       ```

   > Example
       Representation of _rational numbers_ as a pair of integers needs a
       special equality. Here is a way to define it:

       ```
       type Rational
           Fraction (numerator:Integer) (denominator:Integer)

       Comparable.from (that:Rational) = Comparable.new that Rational_Ordering

       type Rational_Ordering
           compare r1:Rational r2:Rational =
               v1 = r1.numerator * r2.denominator
               v2 = r2.numerator * r1.denominator
               if v1 < v2 then Ordering.Less else
                   if v1 > v2 then Ordering.Greater else
                       Ordering.Equal
           hash r1:Rational = 42 # or something better
       ```

       By defining the `Rational_Ordering` and making it available via
       `Comparable.from (that:Rational)` method, all parts of the Enso system will use
       the custom comparator whenever equality or hash code is needed.
@Builtin_Type
type Comparable
    ## PRIVATE
    private By value:Any comparator:Any

    ## PRIVATE
       Creates new opaque `Comparable` instance for given `value` and
       a `Comparator` with two static methods what work on the
       type `T` of the provided `value`:

       ```
       type Comparator T
           compare : T -> T -> (Ordering|Nothing ! Incomparable_Values)
           hash : T -> Integer
       ```

       Typically used inside of `Comparable.from` method definition.

    new value:Any comparator:Any -> Comparable = Comparable.By value comparator

    ## PRIVATE
    less_than_builtin : Any -> Any -> Boolean | Nothing
    less_than_builtin = @Builtin_Method "Comparable.less_than_builtin"

## PRIVATE
Comparable.from (that:Any) = Comparable.new that Default_Comparator

## Types representing the ordering of values.
@Builtin_Type
type Ordering
    ## A representation that the first value orders as less than the second.
    Less

    ## A representation that the first value orders as equal to the second.
    Equal

    ## A representation that the first value orders as greater than the second.
    Greater

    ## ICON operators
       Compares values and returns an `Ordering` representing their order
       or yields an `Incomparable_Values` error when the values aren't
       comparable.
    compare x y -> Ordering ! Incomparable_Values = compare_with_comparators x y

    ## ICON metadata
       Computes a hash number for a given value
    hash x = Comparable.from x . comparator . hash x

    ## GROUP Conversions
       ICON convert
       Converts the ordering to the signed notion of ordering based on integers.

       > Example
         Converting equal ordering to a signed number.

             import Standard.Base.Data.Ordering

             example_to_sign = Ordering.Equal.to_sign
    to_sign : Integer
    to_sign self = case self of
        Ordering.Less -> -1
        Ordering.Greater -> 1
        Ordering.Equal -> 0

    ## ICON order
       A lexicographical comparison.
    and_then : Ordering -> Ordering
    and_then self ~other = case self of
        Ordering.Less -> Ordering.Less
        Ordering.Equal -> other
        Ordering.Greater -> Ordering.Greater

    ## PRIVATE
       ADVANCED
       Converts a sign-based representation of ordering to Enso's native ordering.

       Arguments:
       - sign: The number representing the relative ordering of two entities.

       > Example
         Convert the number 0 to an Enso ordering.

             Ordering.from_sign 0
    from_sign : Integer -> Ordering
    from_sign sign = if sign == 0 then Ordering.Equal else
        if sign > 0 then Ordering.Greater else Ordering.Less

## PRIVATE
Comparable.from (that:Ordering) = Comparable.new that Ordering_Comparator
