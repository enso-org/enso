import project.Any.Any
import project.Data.Array.Array
import project.Data.Numbers.Float
import project.Data.Numbers.Integer
import project.Data.Numbers.Number
import project.Data.Ordering.Comparable
import project.Data.Ordering.Ordering
import project.Data.Vector.No_Wrap
import project.Data.Vector.Vector
import project.Error.Error
import project.Errors.Common.Incomparable_Values
import project.Errors.Empty_Error.Empty_Error
import project.Errors.Illegal_Argument.Illegal_Argument
import project.Meta
import project.Nothing.Nothing
import project.Panic.Panic
import project.Runtime.Ref.Ref
from project.Data.Boolean import Boolean, False, True
from project.Data.Range.Extensions import all
from project.Errors.Common import Unsupported_Argument_Types

polyglot java import java.lang.NullPointerException
polyglot java import org.enso.base.CompareException
polyglot java import org.enso.base.statistics.CorrelationStatistics
polyglot java import org.enso.base.statistics.Rank

## Specifies how to handle ranking of equal values.
type Rank_Method
    ## Use the mean of all ranks for equal values.
    Average

    ## Use the lowest of all ranks for equal values.
    Minimum

    ## Use the highest of all ranks for equal values.
    Maximum

    ## Use same rank value for equal values and next group is the immediate
       following ranking number.
    Dense

    ## Equal values are assigned the next rank in order that they occur.
    Ordinal

    ## GROUP Statistics
       ICON sigma
       Assigns a rank to each value of data, dealing with equal values according to the method.

       Arguments:
       - data: Input data to rank.
    compute : Vector -> Vector
    compute self input =
        java_method = case self of
            Rank_Method.Minimum -> Rank.Method.MINIMUM
            Rank_Method.Maximum -> Rank.Method.MAXIMUM
            Rank_Method.Average -> Rank.Method.AVERAGE
            Rank_Method.Ordinal -> Rank.Method.ORDINAL
            Rank_Method.Dense -> Rank.Method.DENSE

        report_nullpointer caught_panic = Error.throw (Illegal_Argument.Error caught_panic.payload.getMessage)
        handle_nullpointer = Panic.catch NullPointerException handler=report_nullpointer
        handle_cmp_exc = Panic.catch CompareException handler=exc->
            Error.throw (Incomparable_Values.Error exc.payload.getLeftOperand exc.payload.getRightOperand)

        handle_cmp_exc <| handle_nullpointer <|
            java_ranks = Rank.rank input java_method
            Vector.from_polyglot_array java_ranks

type Statistic
    ## Count the number of non-Nothing and non-NaN values.
    Count

    ## The minimum value.
    Minimum

    ## The maximum value.
    Maximum

    ## Sum the non-Nothing and non-NaN values.
    Sum

    ## The sample mean of the values.
    Mean

    ## The variance of the values.
       Arguments:
       - population: specifies if data is a sample or the population.
    Variance (population:Boolean=False)

    ## The standard deviation of the values.
       Arguments:
       - population: specifies if data is a sample or the population.
    Standard_Deviation (population:Boolean=False)

    ## The skewness of the values.
       Arguments:
       - population: specifies if data is a sample or the population.
    Skew (population:Boolean=False)

    ## The sample kurtosis of the values.
    Kurtosis

    ## Calculate the Covariance between data and series.

       Arguments:
       - series: the series to compute the covariance with.
    Covariance (series:Vector)

    ## Calculate the Pearson Correlation between data and series.

       Arguments:
       - series: the series to compute the correlation with.
    Pearson (series:Vector)

    ## Calculate the Spearman Rank Correlation between data and series.

       Arguments:
       - series: the series to compute the correlation with.
    Spearman (series:Vector)

    ## Calculate the coefficient of determination between data and predicted
       series.

       Arguments:
       - predicted: the series to compute the r_squared with.
    R_Squared (predicted:Vector)

    ## PRIVATE
       Gets the order needed to compute a statistic for a moment based statistic.
    order : Integer | Nothing
    order self = case self of
        Statistic.Sum -> 1
        Statistic.Mean -> 1
        Statistic.Variance _ -> 2
        Statistic.Standard_Deviation _ -> 2
        Statistic.Skew _ -> 3
        Statistic.Kurtosis -> 4
        _ -> Nothing

    ## PRIVATE
       Compute a single statistic on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistic: Statistic to calculate.
    compute : Vector -> Statistic -> Any
    compute data statistic=Statistic.Count =
        Statistic.compute_bulk data [statistic] . first

    ## PRIVATE
       Compute a set of statistics on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistics: Set of statistics to calculate.
    compute_bulk : Vector -> Vector Statistic -> Vector Any
    compute_bulk data statistics=[Statistic.Count, Statistic.Sum] =
        moment_order = statistics.map on_problems=No_Wrap .order
        has_min_max = statistics.any (s-> s == Statistic.Minimum || s == Statistic.Maximum)
        max_moment_order = moment_order.filter (v-> v != Nothing) . fold 0 .max
        counter = data.fold (Accumulator.new has_min_max max_moment_order) current-> value-> compute_fold current value

        report_error stats =
            first = 0.up_to stats.length . find i-> (moment_order.at i . is_nothing . not)
            stat = stats.at first
            Error.throw (Illegal_Argument.Error ("Can only compute " + stat.to_text + " on numerical data sets."))

        if max_moment_order > 0 && counter.moments.is_nothing then report_error statistics else
            statistics.map on_problems=No_Wrap statistic-> case statistic of
                Statistic.Covariance series -> check_if_empty counter.count <| calculate_correlation_statistics data series . covariance
                Statistic.Pearson series -> check_if_empty counter.count <| calculate_correlation_statistics data series . pearsonCorrelation
                Statistic.R_Squared series -> check_if_empty counter.count <| calculate_correlation_statistics data series . rSquared
                Statistic.Spearman series -> check_if_empty counter.count <| calculate_spearman_rank data series
                _ -> counter.compute statistic

    ## PRIVATE
       Compute a running statistics on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistics: Set of statistics to calculate.
    running : Vector -> Statistic -> Vector Any
    running data statistic=Statistic.Sum =
        Statistic.running_bulk data [statistic] . map .first

    ## PRIVATE
       Compute a set running statistics on a vector like object.

       Arguments:
       - data: Vector like object which has a `to_array` method.
       - statistics: Set of statistics to calculate.
    running_bulk : Vector -> Vector Statistic -> Vector Any
    running_bulk data statistics=[Statistic.Count, Statistic.Sum] =
        is_unsupported s = case s of
            Statistic.Covariance _ -> True
            Statistic.Pearson _ -> True
            Statistic.Spearman _ -> True
            Statistic.R_Squared _ -> True
            _ -> False

        if statistics.any is_unsupported then Error.throw (Illegal_Argument.Error ("Unsupported Statistics ( " + (statistics.filter is_unsupported . to_text) ") for running calculations.")) else
            moment_order = statistics.map on_problems=No_Wrap .order
            has_min_max = statistics.any (s-> s == Statistic.Minimum || s == Statistic.Maximum)
            max_moment_order = moment_order.filter (v-> v != Nothing) . fold 0 .max

            Panic.handle_wrapped_dataflow_error <|
                output = Vector.new_builder data.length

                counter = Accumulator.new has_min_max max_moment_order
                data.fold counter current->value->
                    result = compute_fold current value

                    row = Panic.throw_wrapped_if_error <| statistics.map on_problems=No_Wrap s-> case s of
                        Statistic.Maximum -> if result.count == 0 then Nothing else result.maximum
                        Statistic.Minimum -> if result.count == 0 then Nothing else result.minimum
                        _ -> result.compute s
                    output.append row

                    result

                output.to_vector

    ## ICON math
       Calculate a variance-covariance matrix between the input series.

       Arguments:
       - data: The input data sets
    covariance_matrix : Vector Vector -> Vector Vector
    covariance_matrix data =
        stats_vectors = calculate_correlation_statistics_matrix data
        stats_vectors.map v->(v.map .covariance)

    ## ICON math
       Calculate a Pearson correlation matrix between the input series.

       Arguments:
       - data: The input data sets
    pearson_correlation : Vector Vector -> Vector Vector
    pearson_correlation data =
        stats_vectors = calculate_correlation_statistics_matrix data
        stats_vectors.map v->(v.map .pearsonCorrelation)

    ## ICON math
       Calculate a Spearman Rank correlation matrix between the input series.

       Arguments:
       - data: The input data sets
    spearman_correlation : Vector Vector -> Vector Vector
    spearman_correlation data =
        Panic.handle_wrapped_dataflow_error <|
            output = Vector.new_builder data.length

            0.up_to data.length . each i->
                output.append <|
                    Vector.new data.length j->
                        if j == i then 1 else
                            if j < i then (output.at j . at i) else
                                Panic.throw_wrapped_if_error <|
                                    calculate_spearman_rank (data.at i) (data.at j)

            output.to_vector

    ## PRIVATE
       Assigns a rank to each value of data, dealing with equal values according to the method.

       Arguments:
       - data: Input data to rank.
       - method: Method used to deal with equal values.
    rank_data : Vector -> Rank_Method -> Vector
    rank_data input method=Rank_Method.Average =
        method.compute input

## PRIVATE
wrap_java_call : Any -> Any
wrap_java_call ~function =
    report_unsupported _ = Error.throw (Illegal_Argument.Error ("Can only compute correlations on numerical data sets."))
    handle_unsupported = Panic.catch Unsupported_Argument_Types handler=report_unsupported

    handle_unsupported <| Illegal_Argument.handle_java_exception <| function

## PRIVATE
   Given two series, get a computed CorrelationStatistics object
calculate_correlation_statistics : Vector -> Vector -> CorrelationStatistics
calculate_correlation_statistics x_data y_data =
    wrap_java_call <| CorrelationStatistics.compute x_data y_data

## PRIVATE
   Given two series, get a compute the Spearman Rank correlation
calculate_spearman_rank : Vector -> Vector -> Float
calculate_spearman_rank x_data y_data =
    wrap_java_call <| CorrelationStatistics.spearmanRankCorrelation x_data y_data

## PRIVATE
   Given a set of series get CorrelationStatistics objects
calculate_correlation_statistics_matrix : Vector Vector -> Vector CorrelationStatistics
calculate_correlation_statistics_matrix data =
    data_array = Vector.new data.length i->(data.at i).to_array
    stats_array = wrap_java_call <| CorrelationStatistics.computeMatrix data_array
    Vector.new stats_array.length i->(Vector.from_polyglot_array (stats_array.at i))

## ALIAS aggregate, summarize
   GROUP Statistics
   ICON sigma
   Compute a single statistic on the vector (ignoring Nothing and NaN values).

   Arguments:
   - statistic: Statistic to calculate.
Vector.compute : Statistic -> Any
Vector.compute self statistic:Statistic=Statistic.Count =
    self.compute_bulk [statistic] . first

## ALIAS aggregate, summarize
   ICON dataframe_map_column
   Compute statistics on the vector (ignoring Nothing and NaN values).

   Arguments:
   - statistics: Set of statistics to calculate.
Vector.compute_bulk : Vector Statistic -> Vector Any
Vector.compute_bulk self statistics=[Statistic.Count, Statistic.Sum] =
    Statistic.compute_bulk self statistics

## GROUP Statistics
   ICON math
   Compute a single running statistic on the vector (ignoring Nothing and NaN
   values).

   Arguments:
   - statistic: Statistic to calculate.
Vector.running : Statistic -> Vector Any
Vector.running self statistic:Statistic=Statistic.Count =
    Statistic.running self statistic

## ICON math
   Compute a set running statistics on the vector (ignoring Nothing and NaN
   values).

   Arguments:
   - statistics: Set of statistics to calculate.
Vector.running_bulk : Vector Statistic -> Vector Any
Vector.running_bulk self statistics=[Statistic.Count, Statistic.Sum] =
    Statistic.running_bulk self statistics

## GROUP Statistics
   ICON dataframe_map_column
   Assigns a rank to each value of data, dealing with equal values according to
   the method.

   Arguments:
   - method: Method used to deal with equal values.
Vector.rank_data : Rank_Method -> Vector
Vector.rank_data self method=Rank_Method.Average =
    Statistic.rank_data self method

## PRIVATE
compute_fold current value = if is_valid value then current.increment value else current

## PRIVATE
check_if_empty count ~action = if count == 0 then Number.nan else action

## PRIVATE
empty_value statistic = case statistic of
    Statistic.Count -> 0
    Statistic.Sum -> 0
    Statistic.Minimum -> Error.throw (Empty_Error.Error Vector)
    Statistic.Maximum -> Error.throw (Empty_Error.Error Vector)
    _ -> Number.nan

## PRIVATE
is_valid v = case v of
    Nothing -> False
    _ : Number -> v.is_nan.not
    _ -> True

## PRIVATE
type Accumulator
    ## PRIVATE
    new : Boolean -> Integer -> Accumulator
    new min_max=True moments=0 = Accumulator.Value 0 min_max Nothing Nothing (Vector.fill moments 0)

    ## PRIVATE
    Value count:Integer min_max:Boolean minimum:Any maximum:Any (moments:Vector|Nothing)

    ## PRIVATE
       Add a single value to the accumulator.
    increment self value = case self.count of
        0 -> if self.min_max then Accumulator.Value 1 True value value (self.update_moments value) else
            Accumulator.Value 1 False value value (self.update_moments value)
        _ ->
            if self.min_max.not then Accumulator.Value self.count+1 False Nothing Nothing (self.update_moments value) else
                minimum = Accumulator.perform_comparison self.minimum value Ordering.Less
                maximum = Accumulator.perform_comparison self.maximum value Ordering.Greater
                Accumulator.Value self.count+1 True minimum maximum (self.update_moments value)

    ## PRIVATE
    perform_comparison current value bound =
        comp = Ordering.compare value current
        if comp == bound then value else current

    ## PRIVATE
    update_moments self value = if self.moments.is_nothing then Nothing else
        case value of
            _ : Number -> self.moments.map_with_index i->v-> v + (value ^ i+1)
            _ -> Nothing

    ## PRIVATE
    compute : Statistic -> Any
    compute self statistic = if self.count == 0 then empty_value statistic else
        case statistic of
            Statistic.Count -> self.count
            Statistic.Minimum -> self.minimum
            Statistic.Maximum -> self.maximum
            Statistic.Sum -> self.check_moments statistic self.moments.first
            Statistic.Mean -> self.check_moments statistic (self.moments.first / self.count)
            Statistic.Variance p -> self.check_moments statistic (self.variance p)
            Statistic.Standard_Deviation p -> (self.compute (Statistic.Variance p)) . sqrt
            Statistic.Skew p -> self.check_moments statistic (self.skew p)
            Statistic.Kurtosis -> self.check_moments statistic (self.kurtosis)

    ## PRIVATE
    variance self population =
        min_points = if population then 1 else 2
        if self.count < min_points then Number.nan else
            denominator = if population then self.count else self.count-1
            (self.moments.second - self.moments.first^2 / self.count) / denominator

    ## PRIVATE
    skew self population =
        if self.count < 3 then Number.nan else
            mean = self.compute (Statistic.Mean)
            standard_deviation = self.compute (Statistic.Standard_Deviation population)
            denominator = if population then self.count else ((self.count-1)*(self.count-2)/self.count)
            scale = 1.0 / (standard_deviation^3) / denominator
            ((self.moments.at 2) - 3 * mean * self.moments.second + 2 * mean * mean * self.moments.first) * scale

    ## PRIVATE
    kurtosis self =
        if self.count < 4 then Number.nan else
            n = self.count
            mean = self.compute (Statistic.Mean)
            variance = self.compute (Statistic.Variance False)
            scale = n * (n+1) / ((n-1)*(n-2)*(n-3)*variance*variance)
            shift = 3*(n-1)*(n-1)/((n-2)*(n-3))
            ((self.moments.at 3) - 4 * mean * (self.moments.at 2) + 6 * mean * mean * self.moments.second - 3 * mean * mean * mean * self.moments.first) * scale - shift

    ## PRIVATE
    check_moments self statistic ~action =
        if self.moments.is_nothing.not && self.moments.length >= statistic.order then action else
            Error.throw (Illegal_Argument.Error ("Can't compute " + statistic.to_text + " on this Accumulator."))
