from Standard.Base import all
import Standard.Base.Errors.Illegal_State.Illegal_State
import Standard.Base.Runtime.Ref.Ref

import project.Column_Constraint.Column_Constraint
import project.Dialect.Dialect
import project.Internal.IR.Context.Context
import project.Internal.IR.From_Spec.From_Spec
import project.Internal.IR.Nulls_Order.Nulls_Order
import project.Internal.IR.Order_Descriptor.Order_Descriptor
import project.Internal.IR.Query.Query
import project.Internal.IR.SQL_Expression.SQL_Expression
import project.Internal.IR.SQL_Join_Kind.SQL_Join_Kind
import project.Internal.IR.Traversal_Helpers
import project.SQL.SQL_Builder
import project.SQL_Statement.SQL_Statement
from project.Dialect import Temp_Table_Style
from project.Errors import Unsupported_Database_Operation
from project.Internal.IR.Operation_Metadata import Row_Number_Metadata

type Dialect_Operations

    ## PRIVATE
       Operations supported by a particular SQL dialect and how they are
       implemented.

       Arguments:
       - operations_dict: Dictionary mapping operation names to their
         implementations; each implementation is a function which takes SQL
         builders for the arguments, and optionally an additional metadata
         argument, and should return a SQL builder yielding code for the whole
         operation.
    Value (operations_dict:(Dictionary Text (Vector (SQL_Builder->SQL_Builder))))

    ## PRIVATE
       Creates a copy of the dialect that supports additional operations or
       overrides existing ones.

       # extend_with : Vector [Text, Vector SQL_Builder -> SQL_Builder] -> Dialect_Operations
    extend_with : Vector Any -> Dialect_Operations
    extend_with self mappings =
        new_dict = mappings.fold self.operations_dict (m -> el -> m.insert (el.at 0) (el.at 1))
        Dialect_Operations.Value new_dict

    ## PRIVATE
       Checks if an operation is supported by the dialect.
    is_operation_supported self operation:Text -> Boolean =
        self.operations_dict.contains_key operation

## PRIVATE

   Generates SQL from a `Query`.

   SQL generation requires some state threaded through the generation process,
   and that state is stored in the fields of this type. This type only contains
   the mutually recursive generators for the SQL IR that require this state.
type SQL_Generator
    ## We can use a Hashset for the let-binding names, since they are guaranteed
       to be distinct and not result in any shadowing.
    private Value (let_bindings_ref : Ref Hashset)

    ## PRIVATE
    private new -> SQL_Generator = SQL_Generator.Value (Ref.new Hashset.empty)

    ## PRIVATE

       Builds code for an expression.

       Arguments:
       - dialect: The SQL dialect in which the expression is being generated.
       - expr: The expression to generate SQL code for.
    generate_expression : Dialect -> SQL_Expression | Order_Descriptor | Query -> SQL_Builder
    generate_expression self dialect expr = case expr of
        SQL_Expression.Column origin name ->
            dialect.wrap_identifier origin ++ '.' ++ dialect.wrap_identifier name
        SQL_Expression.Constant value -> SQL_Builder.interpolation value
        SQL_Expression.Literal value -> SQL_Builder.code value
        SQL_Expression.Text_Literal value ->
            escaped = value.replace "'" "''"
            SQL_Builder.code ("'" + escaped + "'")
        SQL_Expression.Operation kind arguments metadata ->
            op = dialect.dialect_operations.operations_dict.get kind (Error.throw <| Unsupported_Database_Operation.Error kind)
            parsed_args = arguments.map (self.generate_expression dialect)
            result = op parsed_args
            # If the function expects more arguments, we pass the metadata as the last argument.
            case result of
                _ : Function -> result metadata
                _ -> result
        SQL_Expression.Let _ binder bindee body ->
            wrapped_binder = dialect.wrap_identifier binder
            bindee_exp = SQL_Builder.code "SELECT " ++ (self.generate_expression dialect bindee).paren ++ " AS " ++ "x"

            body_sql_builder = self.let_bindings_ref.with_modification (h-> h.insert binder) <|
                self.generate_expression dialect body

            body_exp = SQL_Builder.code "SELECT " ++ body_sql_builder ++ " FROM " ++ wrapped_binder
            (SQL_Builder.code "WITH " ++ wrapped_binder  ++ " AS " ++ bindee_exp.paren ++ " " ++ body_exp).paren
        SQL_Expression.Let_Ref _ binder standalone_expression ->
            binding_state = self.let_bindings_ref.get
            case binding_state.contains binder of
                True ->
                    wrapped_binder = dialect.wrap_identifier binder
                    wrapped_binder ++ "." ++ "x"
                False ->
                    self.generate_expression dialect standalone_expression
        query : Query -> self.generate_sub_query dialect query
        descriptor : Order_Descriptor -> self.generate_order dialect descriptor

    ## PRIVATE

       Builds code for the FROM clause.

       Arguments:
       - dialect: The SQL dialect for which the code is generated.
       - from_spec: A description of the FROM clause.
    generate_from_part : Dialect -> From_Spec -> SQL_Builder
    generate_from_part self dialect from_spec = case from_spec of
        From_Spec.Table name as_name _ ->
            dialect.wrap_identifier name ++ alias dialect as_name
        From_Spec.Query raw_sql as_name ->
            subquery = case raw_sql of
                prepared_statement : SQL_Statement ->
                    SQL_Builder.from_fragments prepared_statement.fragments
                raw_code : Text ->
                    SQL_Builder.code raw_code
            subquery.paren ++ alias dialect as_name
        From_Spec.Literal_Values vecs column_names as_name ->
            Runtime.assert (vecs.length == column_names.length) "Vectors and column names must have the same length"
            dialect.make_table_literal vecs column_names as_name
        From_Spec.Join kind left_spec right_spec on ->
            left = self.generate_from_part dialect left_spec
            right = self.generate_from_part dialect right_spec
            ons = SQL_Builder.join " AND " (on.map (self.generate_expression dialect)) . prefix_if_present " ON "
            left ++ (" " + kind.to_sql + " ") ++ right ++ ons
        From_Spec.Union queries as_name ->
            built_queries = queries.map query->
                case query of
                    Query.Select _ _ -> Nothing
                    _ -> Panic.throw <| Illegal_State.Error "Only SELECT queries can be used in a UNION. This is a bug in the Database library."
                self.generate_sub_query dialect query
            joined = SQL_Builder.join " UNION ALL " built_queries
            joined.paren ++ alias dialect as_name
        From_Spec.Sub_Query columns context as_name ->
            sub = self.generate_sub_query dialect (Query.Select columns context)
            sub.paren ++ alias dialect as_name

    ## PRIVATE

       Builds code for an ordering.

       Arguments:
       - dialect: The SQL dialect for which the code is generated.
       - order_descriptor: A description of the ORDER clause.
    generate_order : Dialect -> Order_Descriptor -> SQL_Builder
    generate_order self dialect order_descriptor =
        order_suffix = case order_descriptor.direction of
            Sort_Direction.Ascending -> " ASC"
            Sort_Direction.Descending -> " DESC"
        nulls_suffix = case order_descriptor.nulls_order of
            Nothing -> ""
            Nulls_Order.First -> " NULLS FIRST"
            Nulls_Order.Last -> " NULLS LAST"
        collation = case order_descriptor.collation of
            Nothing -> ""
            collation_name -> ' COLLATE "' + collation_name + '"'
        base_expression = self.generate_expression dialect order_descriptor.expression
        base_expression ++ collation ++ order_suffix ++ nulls_suffix

    ## PRIVATE
    default_generate_column self dialect expr:(SQL_Expression | Order_Descriptor | Query) name:Text -> SQL_Builder =
        self.generate_expression dialect expr ++ alias dialect name

    ## PRIVATE
        Generates SQL code corresponding to a SELECT statement.

        Arguments:
        - dialect: The SQL dialect for which the code is being generated.
        - ctx: A description of the SELECT clause.
    generate_select_query_sql : Dialect -> Vector (Pair Text SQL_Expression) -> Context -> SQL_Builder
    generate_select_query_sql self dialect columns ctx =
        gen_exprs exprs = exprs.map (self.generate_expression dialect)

        generated_columns = case columns of
            Nothing -> SQL_Builder.code "*"
            _ -> SQL_Builder.join ", " (columns.map (c-> dialect.generate_column_for_select self expr=c.second name=c.first))

        from_part = self.generate_from_part dialect ctx.from_spec
        where_part = (SQL_Builder.join " AND " (gen_exprs ctx.where_filters)) . prefix_if_present " WHERE "
        group_part = (SQL_Builder.join ", " (gen_exprs ctx.groups)) . prefix_if_present " GROUP BY "

        orders = ctx.orders.map (self.generate_order dialect)
        order_part = (SQL_Builder.join ", " orders) . prefix_if_present " ORDER BY "

        extensions = ctx.extensions.map extension->
            part = extension.run_generator (gen_exprs extension.expressions)
            [extension.position, part]

        parts = Vector.build builder->
            builder.append [100, SQL_Builder.code "SELECT "]
            builder.append [200, generated_columns]
            builder.append [300, SQL_Builder.code " FROM " ++ from_part]
            builder.append [400, where_part]
            builder.append [500, group_part]
            builder.append [600, order_part]
            case ctx.limit of
                Nothing -> _
                _ : Integer -> builder.append (dialect.get_limit_sql_modifier ctx.limit)
            extensions.each builder.append

        SQL_Builder.join "" <| parts.sort on=(.first) . map .second

    ## PRIVATE

       Generates the SQL code corresponding to an INSERT query.

       Arguments:
       - dialect: The SQL dialect for which the code is being generated.
       - table_name: The name of the table into which the values are being inserted.
       - pairs: The values to insert into the table, consisting of pairs of key, and
         expression returning a value.
    generate_insert_query : Dialect -> Text -> Vector Any -> SQL_Builder
    generate_insert_query self dialect table_name pairs =
        names = SQL_Builder.join ", " <| pairs.map (.first >> dialect.wrap_identifier)
        values = SQL_Builder.join ", " <| pairs.map (.second >> self.generate_expression dialect)
        into = dialect.wrap_identifier table_name

        SQL_Builder.code "INSERT INTO " ++ into ++ " (" ++ names ++ ") VALUES (" ++ values ++ ")"

    ## PRIVATE

       Builds code for a whole query.

       Arguments:
       - dialect: The SQL dialect for which the code is being generated.
       - query: An IR describing the query.
    generate_sub_query : Dialect -> Query -> SQL_Builder
    generate_sub_query self dialect query = case query of
        Query.Select columns ctx ->
            self.generate_select_query_sql dialect columns ctx
        Query.Insert table_name pairs ->
            self.generate_insert_query dialect table_name pairs
        Query.Create_Table name columns primary_key temporary ->
            generate_create_table dialect name columns primary_key temporary
        Query.Drop_Table name if_exists ->
            maybe_if_exists = if if_exists then SQL_Builder.code "IF EXISTS " else SQL_Builder.empty
            SQL_Builder.code "DROP TABLE " ++ maybe_if_exists ++ dialect.wrap_identifier name
        Query.Truncate_Table name ->
            dialect.generate_truncate_table_sql name
        Query.Insert_From_Select table_name column_names select_query -> case select_query of
            Query.Select _ _ ->
                inner_query = self.generate_sub_query dialect select_query
                columns_part = SQL_Builder.join ", " (column_names.map dialect.wrap_identifier) . paren
                SQL_Builder.code "INSERT INTO " ++ dialect.wrap_identifier table_name ++ " " ++ columns_part ++ " " ++ inner_query
            _ -> Panic.throw (Illegal_State.Error "The inner query of `Query.Insert_From_Select` must be `Query.Select`, but it was "+select_query.to_display_text+". This is a bug in the Database library.")
        Query.Update_From_Table target_table_name source_table_name column_names key_columns ->
            target = dialect.wrap_identifier target_table_name
            source = dialect.wrap_identifier source_table_name
            if column_names.is_empty then
                Panic.throw (Illegal_State.Error "Invalid IR: `Query.Update_From_Table` must have at least one column to update. This is a bug in the Database library.")
            if key_columns.is_empty then
                Panic.throw (Illegal_State.Error "Invalid IR: `Query.Update_From_Table` must have at least one key column. This is a bug in the Database library.")
            set_part = SQL_Builder.join ", " <| column_names.map column_name->
                id = dialect.wrap_identifier column_name
                id ++ "=" ++ source ++ "." ++ id
            key_part = SQL_Builder.join " AND " <| key_columns.map column_name->
                id = dialect.wrap_identifier column_name
                target ++ "." ++ id ++ "=" ++ source ++ "." ++ id
            SQL_Builder.code "UPDATE " ++ target ++ " SET " ++ set_part ++ " FROM " ++ source ++ " WHERE " ++ key_part
        Query.Delete_Unmatched_Rows target_table_name source_table_name key_columns ->
            target = dialect.wrap_identifier target_table_name
            source = dialect.wrap_identifier source_table_name
            if key_columns.is_empty then
                Panic.throw (Illegal_State.Error "Invalid IR: `Query.Delete_Unmatched_Rows` must have at least one key column. This is a bug in the Database library.")
            conditions = SQL_Builder.join " AND " <| key_columns.map name->
                id = dialect.wrap_identifier name
                target ++ "." ++ id ++ "=" ++ source ++ "." ++ id
            SQL_Builder.code "DELETE FROM " ++ target ++ " WHERE NOT EXISTS (SELECT 1 FROM " ++ source ++ " WHERE " ++ conditions ++ ")"
        Query.Delete_Matching_Rows target_table_name source_table_name key_columns ->
            target = dialect.wrap_identifier target_table_name
            source = dialect.wrap_identifier source_table_name
            if key_columns.is_empty then
                Panic.throw (Illegal_State.Error "Invalid IR: `Query.Delete_Matching_Rows` must have at least one key column. This is a bug in the Database library.")
            conditions = SQL_Builder.join " AND " <| key_columns.map name->
                id = dialect.wrap_identifier name
                target ++ "." ++ id ++ "=" ++ source ++ "." ++ id
            SQL_Builder.code "DELETE FROM " ++ target ++ " WHERE EXISTS (SELECT 1 FROM " ++ source ++ " WHERE " ++ conditions ++ ")"
        _ -> Error.throw <| Unsupported_Database_Operation.Error query.to_text

## PRIVATE
   Builds code for a whole query.

   Also preprocesses the query.

   This is the entry-point to using SQL_Builder.

   Arguments:
   - dialect: The SQL dialect for which the code is being generated.
   - query: An IR describing the query.
generate_query : Dialect -> Query -> SQL_Builder
generate_query dialect query =
    preprocessed = preprocess_query query
    SQL_Generator.new . generate_sub_query dialect preprocessed

## PRIVATE

   A helper function to create a binary operator.

   Arguments:
   - name: The name of the binary operator.
make_binary_op : Text -> (Vector SQL_Builder -> SQL_Builder)
make_binary_op name =
    arguments ->
        case arguments.length == 2 of
            True ->
                op = " " + name + " "
                ((arguments.at 0) ++ op ++ (arguments.at 1)).paren
            False ->
                Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a unary operator.

   Arguments:
   - name: The name of the unary operator.
make_unary_op : Text -> (Vector SQL_Builder -> SQL_Builder)
make_unary_op name =
    arguments ->
        case arguments.length == 1 of
            True ->
                (SQL_Builder.code name+" ")++(arguments.at 0) . paren
            False ->
                Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create an unary operation from a function.

   Arguments:
   - name: Name of the operation, used for error reporting.
   - function: A function taking exactly one argument: the generated SQL code
     for the argument of the operation, and returning the generated SQL code for
     the whole operation.
lift_unary_op : Text -> (SQL_Builder -> SQL_Builder) -> Pair Text (Vector SQL_Builder -> SQL_Builder)
lift_unary_op name function =
    generator = arguments -> case arguments.length == 1 of
        False -> Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name + ".")
        True -> function (arguments.at 0)
    [name, generator]

## PRIVATE

   A helper function to create a binary operation from a function.

   Arguments:
   - name: Name of the operation, used for error reporting.
   - function: A function taking exactly two arguments: the generated SQL code
     for the argument of the operation, and returning the generated SQL code for
     the whole operation.
lift_binary_op : Text -> (SQL_Builder -> SQL_Builder -> SQL_Builder) -> Pair Text (Vector SQL_Builder -> SQL_Builder)
lift_binary_op name function =
    generator = arguments -> case arguments.length == 2 of
        False -> Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation " + name + ".")
        True -> function (arguments.at 0) (arguments.at 1)
    [name, generator]

## PRIVATE

   A helper function to create a binary operation from a SQL function name.

   Arguments:
   - name: Name of the operation, used for error reporting.
   - sql_function: SQL function taking two arguments.
lift_binary_sql_function : Text -> Text -> Pair Text (Vector SQL_Builder -> SQL_Builder)
lift_binary_sql_function name:Text sql_function:Text =
    function first second =
        res = SQL_Builder.code (sql_function + "(") ++ first ++ "," ++ second ++ ")"
        res.paren
    lift_binary_op name function

## PRIVATE

   A helper function to create a unary operator which is added to the right of
   the expression.

   Arguments:
   - name: The name of the unary operator.
make_right_unary_op : Text -> (Vector SQL_Builder -> SQL_Builder)
make_right_unary_op name =
    arguments ->
        case arguments.length == 1 of
            True ->
                (arguments.at 0)++(" " + name) . paren
            False ->
                Error.throw ("Invalid amount of arguments for operation " + name)

## PRIVATE

   A helper function to create a functional operation.

   Arguments:
   - name: The name of the function.
make_function : Text -> (Vector SQL_Builder -> SQL_Builder)
make_function name =
    arguments ->
        (SQL_Builder.code name) ++ (SQL_Builder.join ", " arguments . paren)

## PRIVATE

   A helper function to create an operation that takes no arguments.

   Arguments:
   - sql_code: The SQL code for the constant.
make_constant : Text -> (Vector SQL_Builder -> SQL_Builder)
make_constant sql_code =
    arguments ->
        if arguments.not_empty then Error.throw <| Illegal_State.Error "No arguments were expected" else
            SQL_Builder.code sql_code

## PRIVATE

   Wraps the identifier name in quotes and escapes any quotes within the name
   with double-quote.

   Arguments:
   - identifier: The identifier to wrap and escape.

   This is the simplest way of escaping identifiers that should work across most
   dialects.
wrap_in_quotes : Text -> SQL_Builder
wrap_in_quotes identifier =
    escaped = identifier.replace '"' '""'
    SQL_Builder.code ('"'+escaped+'"')

## PRIVATE

   The base SQL dialect that is shared between most SQL implementations.

   It is a base to help creating concrete dialects. It can be extended or
   completely overridden.
base_dialect_operations =
    bin = name -> [name, make_binary_op name]
    unary = name -> [name, make_unary_op name]
    fun = name -> [name, make_function name]

    arith = [["ADD_NUMBER", make_binary_op "+"], ["ADD_TEXT", make_binary_op "||"], bin "-", bin "*", bin "/", bin "%", ["MOD", make_function "MOD"], ["^", make_function "POWER"], ["ROUND", make_function "ROUND"], ["TRUNCATE", make_function "TRUNC"], ["CEIL", make_function "CEIL"], ["FLOOR", make_function "FLOOR"]]
    logic = [bin "AND", bin "OR", unary "NOT", ["IIF", make_iif], ["CASE", case_when]]
    eq = lift_binary_op "==" make_equals
    neq = lift_binary_op "!=" make_not_equals
    compare = [eq, neq, bin "<", bin ">", bin "<=", bin ">=", ["BETWEEN", make_between]]
    functions = [["COALESCE", make_function "COALESCE"], ["ROW_MIN", make_function "MIN"], ["ROW_MAX", make_function "MAX"]]
    agg = [fun "MAX", fun "MIN", fun "AVG", fun "SUM"]
    counts = [fun "COUNT", ["COUNT_ROWS", make_constant "COUNT(*)"]]
    text = [is_empty, bin "LIKE", simple_equals_ignore_case, fold_case, make_case_sensitive, length]
    nulls = [["IS_NULL", make_right_unary_op "IS NULL"], ["FILL_NULL", make_function "COALESCE"]]
    contains = [["IS_IN", make_is_in], ["IS_IN_COLUMN", make_is_in_column]]
    types = [simple_cast]
    windows = [["ROW_NUMBER", make_row_number], ["ROW_NUMBER_IN_GROUP", make_row_number_in_group]]
    base_dict = Dictionary.from_vector (arith + logic + compare + functions + agg + counts + text + nulls + contains + types + windows)
    Dialect_Operations.Value base_dict

## PRIVATE
is_empty = lift_unary_op "IS_EMPTY" arg->
    is_null = (arg ++ " IS NULL").paren
    is_empty = (arg ++ " = ''").paren
    (is_null ++ " OR " ++ is_empty).paren

## PRIVATE
make_iif : Vector SQL_Builder -> SQL_Builder
make_iif arguments = case arguments.length of
    3 ->
        expr = arguments.at 0
        when_true = arguments.at 1
        when_false = arguments.at 2
        (SQL_Builder.code "CASE WHEN " ++ expr ++ " THEN " ++ when_true ++ " WHEN " ++ expr ++ " IS NULL THEN NULL ELSE " ++ when_false ++ " END").paren
    _ ->
        Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation IIF")

## PRIVATE
   For Internal use.
   An IR expression for constructing SQL `CASE` expressions.
case_when : Vector SQL_Builder -> SQL_Builder
case_when arguments =
    if arguments.length < 3 then Error.throw (Illegal_State.Error "CASE_WHEN needs at least 3 arguments.") else
        fallback = arguments.last
        cases = arguments.drop (..Last 1)
        if cases.length % 2 != 0 then Error.throw (Illegal_State.Error "CASE_WHEN expects an odd number of arguments (two arguments for each case and a fallback).") else
            n = cases.length . div 2
            cases_exprs = 0.up_to n . map i->
                condition = cases.at 2*i
                result = cases.at (2*i)+1
                SQL_Builder.code "WHEN " ++ condition ++ " THEN " ++ result
            SQL_Builder.code "CASE " ++ SQL_Builder.join " " cases_exprs ++ " ELSE " ++ fallback ++ " END"

## PRIVATE
simple_cast = Base_Generator.lift_binary_op "CAST" a-> b->
    SQL_Builder.code "CAST(" ++ a ++ " AS " ++ b ++ ")"

## PRIVATE
make_between : Vector SQL_Builder -> SQL_Builder
make_between arguments = case arguments.length of
    3 ->
        expr = arguments.at 0
        lower = arguments.at 1
        upper = arguments.at 2
        (expr ++ " BETWEEN " ++ lower ++ " AND " ++ upper).paren
    _ ->
        Error.throw <| Illegal_State.Error ("Invalid amount of arguments for operation BETWEEN")

## PRIVATE
make_is_in : Vector SQL_Builder -> SQL_Builder
make_is_in arguments = case arguments.length of
    0 -> Error.throw <| Illegal_State.Error ("The operation IS_IN requires at least one argument.")
    ## If only the self argument is provided, no value will ever be in the empty list, so we just short circuit to false.
       `IN ()` would be more meaningful, but it is a syntax error.
    1 -> SQL_Builder.code 'FALSE' . paren
    _ ->
        expr = arguments.first
        list = arguments.drop 1
        expr ++ " IN (" ++ (SQL_Builder.join ", " list) ++ ")"

## PRIVATE
make_is_in_column : Vector SQL_Builder -> SQL_Builder
make_is_in_column arguments = case arguments.length of
    2 ->
        expr = arguments.at 0
        in_query = arguments.at 1
        SQL_Builder.code "(" ++ expr ++ " IN (" ++ in_query ++ "))"
    _ -> Error.throw <| Illegal_State.Error ("The operation IS_IN_COLUMN requires at exactly 2 arguments: the expression and the IN subquery.")

## PRIVATE
make_row_number : Vector SQL_Builder -> Row_Number_Metadata -> SQL_Builder
make_row_number (arguments : Vector) (metadata : Row_Number_Metadata) = if arguments.length < 3 then Error.throw (Illegal_State.Error "Wrong amount of parameters in ROW_NUMBER IR. This is a bug in the Database library.") else
    offset = arguments.at 0
    step = arguments.at 1

    ordering_and_grouping = arguments.drop 2
    ordering = ordering_and_grouping.drop (..Last metadata.groupings_count)
    grouping = ordering_and_grouping.take (..Last metadata.groupings_count)

    group_part = if grouping.length == 0 then "" else
        SQL_Builder.code "PARTITION BY " ++ SQL_Builder.join ", " grouping
    SQL_Builder.code "(row_number() OVER (" ++ group_part ++ " ORDER BY " ++ SQL_Builder.join ", " ordering ++ ") * " ++ step.paren ++ " + " ++ offset.paren ++ ")"

## PRIVATE
   A helper for `lookup_and_replace`, and perhaps other operation.
   It creates an expression that returns a row number within a group.
make_row_number_in_group arguments =
    if arguments.length == 0 then
        Panic.throw <| Illegal_State.Error "The operation ROW_NUMBER_IN_GROUP requires at least one argument."
    SQL_Builder.code "row_number() OVER (PARTITION BY " ++ (SQL_Builder.join ", " arguments) ++ ")"

## PRIVATE

   Adds an alias for the expression, applicable for expressions that represent
   columns or sub-queries.

   Arguments:
   - dialect: The dialect for which to add the alias.
   - name: The name of the alias.
alias : Dialect -> Text -> SQL_Builder
alias dialect name =
    wrapped = dialect.wrap_identifier name
    SQL_Builder.code " AS " ++ wrapped

## PRIVATE
default_make_table_literal wrap_identifier vecs column_names as_name =
    values = SQL_Builder.join ", " (vecs.transpose.map (vec-> SQL_Builder.join ", " (vec.map SQL_Builder.interpolation) . paren))
    structure = (wrap_identifier as_name) ++ (SQL_Builder.join ", " (column_names.map wrap_identifier) . paren)
    SQL_Builder.code "(VALUES " ++ values ++ ") AS " ++ structure

## PRIVATE
fold_case = lift_unary_op "FOLD_CASE" arg->
    SQL_Builder.code "LOWER(UPPER(" ++ arg ++ "))"

## PRIVATE
length = lift_unary_op "LENGTH" str->
    SQL_Builder.code "length(" ++ str ++ ")"

## PRIVATE
make_case_sensitive = lift_unary_op "MAKE_CASE_SENSITIVE" _->
    Error.throw <| Unsupported_Database_Operation.Error ("Case sensitive operations")

## PRIVATE
simple_equals_ignore_case = Base_Generator.lift_binary_op "EQUALS_IGNORE_CASE" a-> b->
    SQL_Builder.code "LOWER(UPPER(" ++ a ++ ")) = LOWER(UPPER(" ++ b ++ "))"

## PRIVATE
make_equals a b =
    a.paren ++ " = " ++ b.paren

## PRIVATE
make_not_equals a b =
    a.paren ++ " != " ++ b.paren

## PRIVATE
   Collect all table names / aliases in a query. Used to generate unused names
   for WITH clauses.
collect_table_names : Query -> Vector Text
collect_table_names (query : Query) -> Vector Text =
    table_name_collector node = case node of
        Query.Insert table_name _ -> [table_name]
        Query.Create_Table table_name _ _ _ -> [table_name]
        Query.Drop_Table table_name _ -> [table_name]
        Query.Truncate_Table table_name -> [table_name]
        Query.Insert_From_Select table_name _ _ -> [table_name]
        Query.Update_From_Table target_table_name source_table_name _ _ -> [target_table_name, source_table_name]
        Query.Delete_Unmatched_Rows target_table_name source_table_name _ -> [target_table_name, source_table_name]
        Query.Delete_Matching_Rows  target_table_name source_table_name _ -> [target_table_name, source_table_name]
        SQL_Expression.Column origin _ -> [origin]
        From_Spec.Table table_name alias _ -> [table_name, alias]
        From_Spec.Query _ alias -> [alias]
        From_Spec.Literal_Values _ _ alias -> [alias]
        From_Spec.Union _ alias -> [alias]
        From_Spec.Sub_Query _ _ alias -> [alias]
        _ -> Nothing
    Traversal_Helpers.traverse_and_accumulate table_name_collector query

## PRIVATE
   Preprocessing step before converting Query to SQL.

   This preprocessing step replaces the long UUID binder names in `WITH` clauses
   with shorter names.

   For `Let_Ref` nodes that are not inside a containing `WITH` nodes, the
   substitution is performed, but it is not used, since the binder is not used
   in those cases.
preprocess_query (query : Query) -> Query =
    table_names = collect_table_names query . distinct
    renamer = Let_Binder_Renamer.new table_names

    transform node = case node of
        SQL_Expression.Let name binder bindee body ->
            new_binder = renamer.rename name binder
            SQL_Expression.Let name new_binder bindee body
        SQL_Expression.Let_Ref name binder standalone_expression ->
            new_binder = renamer.rename name binder
            SQL_Expression.Let_Ref name new_binder standalone_expression
        _ -> node

    query.traverse transform

## PRIVATE
   Arguments:
   - make_raw_concat_expr: a function which takes two expressions - a (possibly
     processed) column expression and a separator and returns a SQL expression
     which concatenates the expressions with separators.
   - make_contains_expr: a function which takes two expressions - a string to
     search in and a substring to search for and returns an expression which is
     true if the string contains the substring.
   - has_quote: specifies whether it should expect an additional SQL argument
     containing a quote character.
   - args: the processed SQL arguments from the generator.

   It takes 4 or 5 SQL arguments depending on `has_quote`.
   The SQL arguments are following:
   - the column expression to concatenate,
   - the separator to use when joining the expressions,
   - a prefix to prepend,
   - a suffix to append,
   - a quote character to use to escape separator if it is present inside of a
     column expression; it should be provided only if `has_quote` is `True` and
     must not be empty then. If the quote character occurs in the expression, it
     is escaped by doubling each occurrence.
make_concat make_raw_concat_expr make_contains_expr has_quote args =
    expected_args = if has_quote then 5 else 4
    if args.length != expected_args then Error.throw (Illegal_State.Error "Unexpected number of arguments for the concat operation.") else
        expr = args.at 0
        separator = args.at 1
        prefix = args.at 2
        suffix = args.at 3
        append = " || "
        possibly_quoted = case has_quote of
            True ->
                quote = args.at 4
                includes_separator = separator ++ " != '' AND " ++ make_contains_expr expr separator
                ## We use the assumption that `has_quote` is True iff `quote` is not empty.
                includes_quote = make_contains_expr expr quote
                is_empty = expr ++ " = ''"
                needs_quoting = includes_separator.paren ++ " OR " ++ includes_quote.paren ++ " OR " ++ is_empty.paren
                escaped = SQL_Builder.code "replace(" ++ expr ++ ", " ++ quote ++ ", " ++ quote ++ append ++ quote ++ ")"
                quoted = quote ++ append ++ escaped ++ append ++ quote
                SQL_Builder.code "CASE WHEN " ++ needs_quoting ++ " THEN " ++ quoted ++ " ELSE " ++ expr ++ " END"
            False -> expr
        transformed_expr = SQL_Builder.code "CASE WHEN " ++ expr ++ " IS NULL THEN '' ELSE " ++ possibly_quoted.paren ++ " END"
        concatenated = make_raw_concat_expr transformed_expr separator
        prefix.paren ++ append ++ concatenated ++ append ++ suffix.paren

## PRIVATE
   Generates the SQL code corresponding to a CREATE TABLE query.
generate_create_table dialect name columns primary_key temporary =
    column_definitions = columns.map (generate_column_description dialect)
    modifiers = if primary_key.is_nothing then [] else
        [SQL_Builder.code ", PRIMARY KEY (" ++ SQL_Builder.join ", " (primary_key.map dialect.wrap_identifier) ++ ")"]
    table_type = if temporary && dialect.temp_table_style == Temp_Table_Style.Temporary_Table then "TEMPORARY TABLE" else "TABLE"
    create_prefix = SQL_Builder.code ("CREATE "+table_type+" ") ++ dialect.wrap_identifier name
    create_body = (SQL_Builder.join ", " column_definitions) ++ (SQL_Builder.join "" modifiers)
    create_prefix ++ " (" ++ create_body ++ ")"

## PRIVATE
   Generates a description of a single column for a CREATE TABLE query.
generate_column_description dialect descriptor =
    modifiers = descriptor.constraints.map constraint-> case constraint of
        Column_Constraint.Default_Expression raw_expression -> (SQL_Builder.code "DEFAULT ") ++ (SQL_Builder.code raw_expression . paren)
        Column_Constraint.Not_Null -> SQL_Builder.code "NOT NULL"
    suffix = if modifiers.is_empty then SQL_Builder.empty else
        SQL_Builder.code " " ++ (SQL_Builder.join " " modifiers)
    (dialect.wrap_identifier descriptor.name) ++ " " ++ descriptor.sql_type ++ suffix

## PRIVATE
   option for implementing generate_truncate_table_sql
truncate_table_delete_from_style : Dialect -> Text -> SQL_Builder
truncate_table_delete_from_style dialect table_name =
    SQL_Builder.code "DELETE FROM " ++ dialect.wrap_identifier table_name

## PRIVATE
   option for implementing generate_truncate_table_sql
truncate_table_truncate_table_style : Dialect -> Text -> SQL_Builder
truncate_table_truncate_table_style dialect table_name =
    SQL_Builder.code "TRUNCATE TABLE " ++ dialect.wrap_identifier table_name

## PRIVATE
default_fetch_types_query dialect expression context where_filter_always_false_literal="FALSE" =
    empty_context = context.add_where_filters [SQL_Expression.Literal where_filter_always_false_literal]
    dialect.generate_sql (Query.Select [["typed_column", expression]] empty_context)

## PRIVATE
   Helper class for shortening the binder names generated for WITH clauses.

   Each time `rename` is called on an identifier it hasn't seen before, it
   generates a new, short identifier. The short identifier consists of the `name`
   string and a unique (serial) number. The short name is saved and returned the
   next time that same identifier is passed in.
type Let_Binder_Renamer
    ## PRIVATE
    Value (existing_tables : Hashset Text) (binders_ref : Ref Dictionary) (serial_ref : Ref Integer)

    ## PRIVATE
    new (existing_tables : Vector Text) -> Let_Binder_Renamer =
        Let_Binder_Renamer.Value (Hashset.from_vector existing_tables) (Ref.new Dictionary.empty) (Ref.new 0)

    ## PRIVATE
       Returns the short identifier that this binder maps to, and generates one
       if it hasn't been mapped yet.
    rename self (name : Text) (binder : Text) =
        self.binders_ref.get.get binder if_missing=Nothing . if_nothing <|
            max_tries = 1000
            go i =
                next_serial = self.serial_ref.modify (_+1)
                new_binder = name + "_" + next_serial.to_text
                case self.existing_tables.contains new_binder of
                    True ->
                        if i >= max_tries then Error.throw "Unable to find a unique name for a WITH binder" else
                            @Tail_Call go (i+1)
                    False ->
                        self.binders_ref.modify (d-> d.insert binder new_binder)
                        new_binder
            go 0
