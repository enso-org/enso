private

from Standard.Base import all
import Standard.Base.Data.Numbers.Positive_Integer
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import Standard.Table.Internal.Java_Exports
from Standard.Table import Bits, Value_Type
from Standard.Table.Errors import Inexact_Type_Coercion

import Standard.Database.Internal.Column_Fetcher as Column_Fetcher_Module
import Standard.Database.Internal.Column_Fetcher.Column_Fetcher
import Standard.Database.Internal.IR.SQL_Expression.SQL_Expression
import Standard.Database.Internal.SQL_Type_Mapping
import Standard.Database.Internal.SQL_Type_Reference.SQL_Type_Reference
import Standard.Database.SQL_Type.SQL_Type
from Standard.Database.Errors import Unsupported_Database_Type

polyglot java import java.sql.Types

## PRIVATE
type SQLServer_Type_Mapping
    ## PRIVATE
    value_type_to_sql : Value_Type -> Problem_Behavior -> SQL_Type
    value_type_to_sql value_type on_problems =
        result = case value_type of
            Value_Type.Boolean -> SQL_Type.Value Types.BIT "BIT"
            ## A SQLServer TinyInt is unsigned with a range of 0-255, 
               so we have to use SmallInt to be able to handle the negative values in our Byte type.
            Value_Type.Byte -> SQL_Type.Value Types.SMALLINT "SMALLINT"
            Value_Type.Integer Bits.Bits_16 -> SQL_Type.Value Types.SMALLINT "SMALLINT"
            Value_Type.Integer Bits.Bits_32 -> SQL_Type.Value Types.INTEGER "INTEGER"
            Value_Type.Integer Bits.Bits_64 -> SQL_Type.Value Types.BIGINT "BIGINT"
            Value_Type.Float Bits.Bits_32 -> SQL_Type.Value Types.REAL "REAL"
            Value_Type.Float Bits.Bits_64 -> SQL_Type.Value Types.DOUBLE "FLOAT"
            Value_Type.Decimal precision scale -> case precision of
                # If precision is not set, scale is also lost because SQL is unable to express a scale without a precision.
                Nothing -> SQL_Type.Value Types.DECIMAL "DECIMAL" Nothing Nothing
                # Scale can be set or not, if precision is given, so no check needed.
                _       -> SQL_Type.Value Types.DECIMAL "DECIMAL" precision scale
            Value_Type.Char size variable ->
                case variable of
                    True  ->
                        is_unbounded = case size of
                            Nothing -> True
                            Positive_Integer.Value integer -> integer == max_precision
                        case is_unbounded of
                            True  -> SQL_Type.Value Types.VARCHAR "NVARCHAR(MAX)"
                            False -> SQL_Type.Value Types.VARCHAR "NVARCHAR" size
                    False -> SQL_Type.Value Types.CHAR "NCHAR" size
            Value_Type.Time -> SQL_Type.Value Types.TIME "TIME"
            Value_Type.Date -> SQL_Type.Value Types.DATE "DATE"
            Value_Type.Date_Time with_timezone ->
                type_name = if with_timezone then "DATETIMEOFFSET" else "DATETIME2"
                SQL_Type.Value Types.TIMESTAMP type_name
            Value_Type.Binary size variable_length ->
                ## Max size for BINARY and VARBINARY is 8000, so we have to use VARBINARY(MAX) for larger sizes.
                need_varbinary_max = size.is_nothing || (size > 8000)
                case need_varbinary_max of
                    True  -> SQL_Type.Value Types.BINARY "VARBINARY(MAX)"
                    False -> case variable_length of
                        True  -> SQL_Type.Value Types.BINARY "VARBINARY" size
                        False -> SQL_Type.Value Types.BINARY "BINARY" size
            Value_Type.Mixed -> Error.throw (Unsupported_Database_Type.Error "Mixed" "SQLServer")
            Value_Type.Unsupported_Data_Type type_name underlying_type ->
                underlying_type.if_nothing <| Error.throw <| Illegal_Argument.Error <|
                    "An unsupported SQL type ["+type_name.to_text+"] cannot be converted into an SQL type because it did not contain the SQL metadata needed to reconstruct it."

        approximated_value_type = SQLServer_Type_Mapping.sql_type_to_value_type result
        problems = if approximated_value_type == value_type then [] else [Inexact_Type_Coercion.Warning value_type approximated_value_type]
        on_problems.attach_problems_before problems result

    ## PRIVATE
    sql_type_to_value_type : SQL_Type -> Value_Type
    sql_type_to_value_type sql_type =
        case sql_type.typeid of
            Types.BIT -> Value_Type.Boolean
            Types.TINYINT -> Value_Type.Integer Bits.Bits_16
            Types.SMALLINT -> Value_Type.Integer Bits.Bits_16
            Types.INTEGER -> Value_Type.Integer Bits.Bits_32
            Types.BIGINT -> Value_Type.Integer Bits.Bits_64
            Types.REAL -> Value_Type.Float Bits.Bits_32
            Types.DOUBLE -> Value_Type.Float Bits.Bits_64
            Types.VARCHAR -> 
                effective_size = if sql_type.precision==max_length || (sql_type.precision==9 && sql_type.scale==9) then Nothing else sql_type.precision
                Value_Type.Char size=effective_size variable_length=True
            Types.NVARCHAR -> 
                effective_size = if sql_type.precision==max_length || (sql_type.precision==9 && sql_type.scale==9) then Nothing else sql_type.precision
                Value_Type.Char size=effective_size variable_length=True
            Types.DATE -> Value_Type.Date
            Types.TIME -> Value_Type.Time
            Types.TIMESTAMP -> case sql_type.name of
                "smalldatetime" -> Value_Type.Date_Time with_timezone=False
                "datetime" -> Value_Type.Date_Time with_timezone=False
                "datetime2" -> Value_Type.Date_Time with_timezone=False
                _ -> on_unknown_type sql_type
            Types.BINARY -> case sql_type.name of
                "varbinary" -> Value_Type.Binary size=sql_type.precision variable_length=True
                "binary" -> Value_Type.Binary size=sql_type.precision variable_length=False
                _ -> on_unknown_type sql_type
            _ -> case sql_type.name of
                "datetimeoffset" -> Value_Type.Date_Time with_timezone=True
                _ -> on_unknown_type sql_type

    ## PRIVATE
    sql_type_to_text : SQL_Type -> Text
    sql_type_to_text sql_type = SQL_Type_Mapping.default_sql_type_to_text sql_type

    ## PRIVATE
       The SQLServer_Type_Mapping always relies on the return type determined by
       the database backend except for boolean types.
    infer_return_type : (SQL_Expression -> SQL_Type_Reference) -> Text -> Vector -> SQL_Expression -> SQL_Type_Reference
    infer_return_type infer_from_database_callback op_name arguments expression =
        case operations_dict.contains_key op_name of
            False -> infer_from_database_callback expression
            True -> 
                handler = operations_dict.at op_name
                sql_type = handler arguments
                SQL_Type_Reference.from_constant sql_type

    ## PRIVATE
       We want to respect any overriding references, but references that rely on
       computing the type by the database are resolved to Nothing to just rely
       on the `ResultSet` metadata and decrease overhead.
    prepare_type_overrides : Nothing | Vector SQL_Type_Reference -> Nothing | Vector (Nothing | SQL_Type)
    prepare_type_overrides column_type_suggestions = case column_type_suggestions of
        Nothing -> Nothing
        _ : Vector -> column_type_suggestions.map .to_type_override

    ## PRIVATE
       Creates a `Column_Fetcher` used to fetch data from a result set and build
       an in-memory column from it, based on the given column type.
    make_column_fetcher : SQL_Type -> Column_Fetcher
    make_column_fetcher self sql_type =
        value_type = self.sql_type_to_value_type sql_type
        Column_Fetcher_Module.default_fetcher_for_value_type value_type

    ## PRIVATE
    is_implicit_conversion (source_type : Value_Type) (target_type : Value_Type) -> Boolean =
        # Currently, we do not have any implicit conversions.
        _ = [source_type, target_type]
        False

    ## PRIVATE
    should_warn_on_materialize (db_type : Value_Type) (in_memory_type : Value_Type) -> Boolean =
        SQL_Type_Mapping.default_should_warn_on_materialize db_type in_memory_type

    ## PRIVATE
    is_integer_type (value_type : Value_Type) -> Boolean = value_type.is_integer

    ## PRIVATE
    is_same_type (value_type1 : Value_Type) (value_type2 : Value_Type) -> Boolean =
        value_type1.is_same_type value_type2

## PRIVATE
on_unknown_type sql_type =
    Value_Type.Unsupported_Data_Type sql_type.name sql_type

## PRIVATE
   Maps operation names to functions that infer its result type.
operations_dict : Dictionary Text (Vector -> SQL_Type)
operations_dict = Dictionary.from_vector [["IS_NULL", const (SQL_Type.Value Types.BIT "BIT")],["==", const (SQL_Type.Value Types.BIT "BIT")],["NOT", const (SQL_Type.Value Types.BIT "BIT")],["BETWEEN", const (SQL_Type.Value Types.BIT "BIT")]]

## PRIVATE
   This is the maximum size that JDBC driver reports for 'unbounded' types in
   SQLServer.
max_length = 16777216

## PRIVATE
   This is the maximum size that JDBC driver reports for 'unbounded' types in
   SQLServer.
max_precision = 2147483647
