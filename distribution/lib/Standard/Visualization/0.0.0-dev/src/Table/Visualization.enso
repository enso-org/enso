from Standard.Base import all
import Standard.Base.Data.Vector.Builder

import Standard.Table.Row.Row
from Standard.Table import Column, Excel_Workbook, Table, Value_Type

import Standard.Database.DB_Column.DB_Column
import Standard.Database.DB_Table.DB_Table

import project.Helpers

## TODO add an initial offset to fully support lazy visualizations

## PRIVATE

   Prepares a table or column for visualization.

   Arguments:
   - x: The table to prepare for visualization.
   - max_rows: The maximum number of rows to display.

   In case of Database backed data, it materializes a fragment of the data.
prepare_visualization : Any -> Integer -> Text
prepare_visualization y max_rows=1000 =
    x = Warning.set y []

    result = case x of
        _ : Vector -> make_json_for_vector x max_rows
        _ : Array -> prepare_visualization x.to_vector max_rows
        _ : Dictionary -> make_json_for_dictionary x max_rows
        _ : JS_Object -> make_json_for_js_object x max_rows
        _ : Row -> make_json_for_dictionary x.to_dictionary max_rows "column"
        _ : Column -> prepare_visualization x.to_table max_rows
        _ : Table ->
            dataframe = x.take max_rows
            all_rows_count = x.row_count
            make_json_for_table dataframe all_rows_count True False
        _ : DB_Column -> prepare_visualization x.to_table max_rows
        _ : DB_Table ->
            dataframe = x.read (..First max_rows)
            all_rows_count = x.row_count
            make_json_for_table dataframe all_rows_count True True
        _ : Function ->
            pairs = [['_display_text_', '[Function '+x.to_text+']']]
            value = JS_Object.from_pairs pairs
            JS_Object.from_pairs [["json", value]]
        _ : Number ->
            JS_Object.from_pairs [["json", make_json_for_value x]]
        _ : Excel_Workbook ->
            js_value = x.to_js_object
            JS_Object.from_pairs [["json", js_value], ["sheet_names", x . sheet_names], ["get_child_node_action", "read"], ["type", "Excel_Workbook"]]
        _ : XML_Document -> make_json_for_xml_element x.root_element max_rows "XML_Document"
        _ : XML_Element -> make_json_for_xml_element x max_rows
        _ -> make_json_for_other x

    result.to_text

## PRIVATE
   Column Limit
max_columns = 250

##PRIVATE
whitespace_count : Column -> Integer | Nothing
whitespace_count col =
    find_whitespace col = 
        filtered = col.to_vector.filter (c-> c.is_a Text && (c.first.is_whitespace || c.last.is_whitespace))
        filtered.length
    if (col.value_type == Value_Type.Mixed || col.value_type.is_text) then find_whitespace col else Nothing 

## PRIVATE
   Render Vector to JSON
make_json_for_vector : Vector -> Integer -> JS_Object
make_json_for_vector vector max_rows =
    all_rows = ["all_rows_count", vector.length]
    get_child_node_action = ["get_child_node_action", "at"]
    truncated = vector.take max_rows
    some_values = truncated.any (v->v.is_nothing.not)
    if some_values.not then JS_Object.from_pairs [["type", "Vector"], all_rows, ["json", truncated.map make_json_for_value], get_child_node_action] else
        matrix = make_json_for_matrix (Builder.new truncated.length) truncated
        if matrix.is_nothing.not then JS_Object.from_pairs [["type", "Matrix"], all_rows, ["json", matrix], ["column_count", matrix.fold 0 c->v-> if v.is_nothing then c else c.max v.length], get_child_node_action] else
            object_matrix = make_json_for_object_matrix (Builder.new truncated.length) truncated
            if object_matrix.is_nothing.not then JS_Object.from_pairs [["type", "Object_Matrix"], all_rows, ["json", object_matrix], get_child_node_action] else
                JS_Object.from_pairs [["type", "Vector"], all_rows, ["json", truncated.map make_json_for_value], get_child_node_action]

## PRIVATE
   Render Vector of Vector / Array to JSON
make_json_for_matrix : Builder -> Vector -> Integer -> Vector | Nothing
make_json_for_matrix current vector idx=0 = if idx == vector.length then current.to_vector else
    row = vector.at idx
    to_append = case row of
        Nothing -> Nothing
        _ : Vector -> row.take max_columns . map make_json_for_value
        _ : Array -> row.to_vector.take max_columns . map make_json_for_value
        _ -> False
    if to_append == False then Nothing else
        current.append to_append
        @Tail_Call make_json_for_matrix current vector idx+1

## PRIVATE
   Render Vector of Objects to JSON
make_json_for_object_matrix : Builder -> Vector -> Integer -> Vector | Nothing
make_json_for_object_matrix current vector idx=0 = if idx == vector.length then current.to_vector else
    row = vector.at idx
    to_append = case row of
        Nothing -> Nothing
        _ : Date -> False
        _ : Time_Of_Day -> False
        _ : Date_Time -> False
        _ : Duration -> False
        _ : Period -> False
        _ : Dictionary ->
            pairs = row.keys.map k-> [k.to_text, make_json_for_value (row.get k)]
            JS_Object.from_pairs pairs
        _ : Row ->
            pairs = row.table.column_names.map f-> [f, make_json_for_value (row.get f)]
            JS_Object.from_pairs pairs
        _ ->
            js_object = row.to_js_object
            if js_object.is_a JS_Object . not then False else
                if js_object.field_names.sort == ["constructor", "type"] then False else
                    pairs = js_object.field_names.map f-> [f, make_json_for_value (js_object.get f)]
                    JS_Object.from_pairs pairs
    if to_append == False then Nothing else
        current.append to_append
        @Tail_Call make_json_for_object_matrix current vector idx+1

## PRIVATE
   Render Dictionary to JSON
make_json_for_dictionary : Dictionary -> Integer -> Text -> JS_Object
make_json_for_dictionary dict max_items key_name="key" =
    header = ["header", [key_name, "value"]]
    all_rows = ["all_rows_count", dict.size]
    as_vector = Warning.clear (dict.to_vector.take max_items)
    mapped = as_vector . map p-> [p.first.to_text, make_json_for_value p.second]
    data = ["data", [mapped.map .first, mapped.map .second]]
    links = ["get_child_node_action", "at"]
    get_child_node_action_link_name = ["get_child_node_link_name", key_name]
    JS_Object.from_pairs [header, data, all_rows, links, get_child_node_action_link_name, ["type", "Map"]]

## PRIVATE
   Render JS_Object to JSON
make_json_for_js_object : JS_Object -> Integer -> JS_Object
make_json_for_js_object js_object max_items =
    fields = js_object.field_names
    header = ["header", ["key", "value"]]
    all_rows = ["all_rows_count", fields.length]
    map_vector = Warning.clear (fields.take max_items)
    mapped = map_vector . map p-> [p, make_json_for_value (js_object.get p)]
    data = ["data", [mapped.map .first, mapped.map .second]]
    JS_Object.from_pairs [header, data, all_rows, ["type", "Map"]]

## PRIVATE
   Render XML_Element to JSON
make_json_for_xml_element : XML_Element -> Integer -> Text -> JS_Object
make_json_for_xml_element xml_element max_items type:Text="XML_Element" =
    header = ["header", ["key", "type", "value"]]
    all_rows = ["all_rows_count", xml_element.attributes.length + xml_element.children.length]

    attribs = xml_element.attributes.to_vector.take max_items . map a-> ["@" + a.first, "Attribute", a.second]
    children = xml_element.children.take (max_items - attribs.length) . map_with_index i->c-> if c.is_a Text then [i.to_text, "Text", c] else
        render_start = "<"+c.name
        render_attribs = if c.attributes.length == 0 then "" else
            " " + ((c.attributes.to_vector.take 5 . map a-> a.first+'="'+a.second+'"') . join " ") + (if c.attributes.length > 5 then " ..." else "")
        render_end = case c.child_count of
            0 -> "/>"
            1 -> if c.children.first.is_a Text then ">" + c.children.first + "</" + c.name + ">" else "> ... 1 child element ... </" + c.name + ">"
            _ -> ">..." + c.child_count.to_text + " child elements...</" + c.name + ">"
        [i.to_text, "Element", render_start+render_attribs+render_end]
    map_vector = Warning.clear (attribs + children)

    data = ["data", [map_vector.map .first, map_vector.map .second, map_vector.map i-> i.at 2]]
    get_child_node_fields = if type == "XML_Element" then [["get_child_node_action", "get"], ["get_child_node_link_name", "key"], ["link_value_type", "number"]] else [["get_child_node_action", "get_child_element"], ["get_child_node_link_name", "key"], ["link_value_type", "number"]]
    JS_Object.from_pairs <| [header, data, all_rows, ["type", type]] + get_child_node_fields

## PRIVATE
   Creates a JSON representation for the visualizations.

   Arguments:
   - dataframe: the dataframe containing (possibly just a fragment of) the data
     to display.
   - all_rows_count: the number of all rows in the underlying data, useful if
     only a fragment is displayed.
make_json_for_table : Table -> Integer -> Boolean -> Boolean -> JS_Object
make_json_for_table dataframe all_rows_count include_index_col is_db_table =
    get_vector c = Warning.set (c.to_vector.map v-> make_json_for_value v) []
    columns     = dataframe.columns
    header      = ["header", columns.map .name]
    value_type  = ["value_type", columns.map .value_type]
    data        = ["data",   columns.map get_vector]
    all_rows    = ["all_rows_count", all_rows_count]
    has_index_col = ["has_index_col", include_index_col]
    links       = ["get_child_node_action", "get_row"]
    number_of_nothing = if is_db_table then Nothing else columns.map c-> c.count_nothing
    number_of_whitespace= if is_db_table then Nothing else columns.map c-> whitespace_count c
    data_quality_pairs = JS_Object.from_pairs [["number_of_nothing", number_of_nothing], ["number_of_whitespace", number_of_whitespace]]
    pairs       = [header, value_type, data, all_rows, has_index_col, links, ["data_quality_pairs", data_quality_pairs] ,["type", "Table"]]
    JS_Object.from_pairs pairs

## PRIVATE
   Create JSON serialization of values.
make_json_for_other : Any -> JS_Object
make_json_for_other x =
    js_value = Panic.recover Any x.to_js_object
    supports_js_object = js_value.is_error.not
    case supports_js_object of
        True ->
            value = if js_value.is_a JS_Object . not then js_value else
                pairs = [['_display_text_', x.to_display_text]] + js_value.field_names.map f-> [f, make_json_for_value (js_value.get f)]
                JS_Object.from_pairs pairs
            link_fields = if js_value.is_a JS_Object . not then [] else
                if js_value.contains_key 'links' then [["links", js_value.get 'links']] else []
            additional_fields = if js_value.is_a JS_Object . not then [] else
                if js_value.contains_key 'get_child_node_action' then [["get_child_node_action", js_value.get 'get_child_node_action']] else []
            JS_Object.from_pairs <| [["json", value]] + additional_fields + link_fields

        # Fallback for objects that fail to be serialized through `to_js_object`.
        False ->
            json = JS_Object.from_pairs [["_display_text_", x.to_display_text], ["_to_js_object_error_", js_value.catch.to_display_text]]
            JS_Object.from_pairs [["json", json]]

## PRIVATE
   Create JSON serialization of values for the table.
make_json_for_value : Any -> Integer -> Text
make_json_for_value val level=0 = case val of
    Nothing -> Nothing
    _ : Text -> val
    _ : Number ->
        js_version = if val.is_finite then val.to_js_object else JS_Object.from_pairs [["type", "Float"], ["value", val.to_text]]
        if js_version.is_a JS_Object . not then js_version else
            pairs = [['_display_text_', val.to_display_text]] + js_version.field_names.map f-> [f, js_version.get f]
            JS_Object.from_pairs pairs
    _ : Boolean -> val
    _ : Vector ->
        if level != 0 then "[… "+val.length.to_text+" items]" else
            truncated = val.take 5 . map v-> (make_json_for_value v level+1).to_text
            prepared = if val.length > 5 then truncated + ["… " + (val.length - 5).to_text+ " items"] else truncated
            "[" + (prepared.join ", ") + "]"
    _ : Array -> make_json_for_value val.to_vector level
    _ : Dictionary ->
        if level != 0 then "{… "+val.size.to_text+" items}" else
            truncated = val.keys.take 5 . map k-> k.to_text + ": " + (make_json_for_value (val.get k) level+1).to_text
            prepared = if val.length > 5 then truncated + ["… " + (val.length - 5).to_text+ " items"] else truncated
            "{" + (prepared.join ", ") + "}"
    _ : Column ->
        if level != 0 then "Column{" +val.name + ": " + val.row_count + " rows}" else
            items = make_json_for_value val.to_vector level
            "Column{" + val.name + ": " + items + "}"
    _ : Row ->
        if level != 0 then "Row{" + val.table.column_count + " columns}" else
            truncated = val.table.column_names.take 5 . map _.to_text
            prepared = if val.table.column_count > 5 then truncated + ["… " + (val.table.column_count - 5).to_text+ " more"] else truncated
            "Row{" + (prepared.join ", ") + "}"
    _ : DB_Column ->
        if level != 0 then "Column{" +val.name + ": " + val.row_count + " rows}" else
            materialise = val.read (..First 5)
            truncated = materialise . map k-> k.to_text + ": " + (make_json_for_value (val.get k) level+1).to_text
            prepared = if val.length > 5 then truncated + ["… " + (val.length - 5).to_text+ " items"] else truncated
            "Column{" + val.name + ": " + prepared + "}"
    _ : Table ->
        if level != 0 then "Table{" + val.row_count + " rows x " + val.column_count + " columns}" else
            truncated = val.columns.take 5 . map _.name
            prepared = if val.column_count > 5 then truncated + ["… " + (val.column_count - 5).to_text+ " more"] else truncated
            "Table{" + val.row_count.to_text + " rows x [" + (prepared.join ", ") + "]}"
    _ : DB_Table ->
        if level != 0 then "Table{" + val.row_count + " rows x " + val.column_count + " columns}" else
            truncated = val.columns.take 5 . map _.name
            prepared = if val.column_count > 5 then truncated + ["… " + (val.column_count - 5).to_text+ " more"] else truncated
            "Table{" + val.row_count.to_text + " rows x [" + (prepared.join ", ") + "]}"
    _ : Function -> "[Function "+val.to_text+"]"
    _ -> val.to_display_text
