load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@aspect_rules_js//js:defs.bzl", "js_binary", "js_run_binary")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@env//:defs.bzl", "getenv")
load("@npm//:defs.bzl", "npm_link_all_packages", "npm_link_targets")
load("@npm//app/gui:vite/package_json.bzl", vite_bin = "bin")

npm_link_all_packages(name = "node_modules")

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    deps = ["//:tsconfig"],
)

ts_config(
    name = "tsconfig_node",
    src = "tsconfig.node.json",
    deps = [":tsconfig"],
)

ts_config(
    name = "tsconfig_app",
    src = "tsconfig.app.json",
    deps = [":tsconfig"],
)

ts_config(
    name = "tsconfig_scripts",
    src = "tsconfig.scripts.json",
)

ts_config(
    name = "tsconfig_app_vitest",
    src = "tsconfig.app.vitest.json",
    deps = [":tsconfig_app"],
)

# BUILD_ENV_VARS = [
#     "BUILD_INFO_VERSION",
#     "BUILD_INFO_COMMIT_HASH",
#     "ENSO_CLOUD_ENVIRONMENT",
#     "ENSO_CLOUD_API_URL",
#     "ENSO_CLOUD_CHAT_URL",
#     "ENSO_CLOUD_SENTRY_DSN",
#     "ENSO_CLOUD_STRIPE_KEY",
#     "ENSO_CLOUD_COGNITO_USER_POOL_ID",
#     "ENSO_CLOUD_COGNITO_USER_POOL_WEB_CLIENT_ID",
#     "ENSO_CLOUD_COGNITO_DOMAIN",
#     "ENSO_CLOUD_COGNITO_REGION",
#     "PROJECT_MANAGER_URL",
#     "YDOC_SERVER_URL",
#     "CLOUD_BUILD",
# ]

ICON_GENERATED_DIR = "src/project-view/util/iconMetadata"

SRCS = [
    "//:tsconfig",
    ":tsconfig",
    ":tsconfig_app",
    ":tsconfig_node",
    ":tsconfig_app_vitest",
    ":tsconfig_scripts",
    ":icon_metadata",
    "vite.config.ts",
    "tailwind.config.ts",
    "package.json",
    "index.html",
    ".env.bazel",
] + glob(
    [
        "src/**",
        "public/**",
        "project-manager-shim-middleware/**",
    ],
    [ICON_GENERATED_DIR + "/**"],
)

vite_bin.vite(
    name = "vite_build",
    srcs = SRCS + npm_link_targets(),
    args = [
        "build",
        "--mode=bazel",
    ],
    chdir = package_name(),
    env = {
        "NODE_ENV": "production",
    },
    out_dirs = ["dist"],
)

vite_bin.vite_binary(
    name = "vite_preview",
    args = ["preview"],
    chdir = package_name(),
    data = [
        "vite.config.ts",
        ":vite_build",
    ],
)

js_binary(
    name = "script_generate_icon_metadata",
    entry_point = "scripts/generateIconMetadata.mjs",
)

js_run_binary(
    name = "icon_metadata",
    srcs = ["src/project-view/assets/icons.svg"],
    chdir = package_name(),
    out_dirs = [ICON_GENERATED_DIR],
    tool = ":script_generate_icon_metadata",
    visibility = ["//visibility:public"],
)

js_binary(
    name = "script_env_replacer",
    entry_point = "scripts/envReplacer.mjs",
)

js_run_binary(
    name = "dist",
    srcs = [
        "node_modules/dotenv",
        ":vite_build",
    ] + glob([".env*"]),
    args = [
        "$(rootpath :vite_build)",
        package_name() + "/env_replaced",
        package_name(),
    ],
    env = {
        "NODE_ENV": getenv("NODE_ENV"),
    },
    out_dirs = ["env_replaced"],
    tool = ":script_env_replacer",
    visibility = ["//visibility:public"],
)

# Convenience rule to output built artifacts to the filesystem, so JS tooling can see them.
# Important! Make sure the output of this rule is NOT used during the build process.
# This is part of the ICON_GENERATED_FILES definition.
write_source_files(
    name = "write_icon_metadata",
    files = {
        ICON_GENERATED_DIR: ":icon_metadata",
    },
    suggested_update_target = "//:write_all",
    visibility = ["//visibility:public"],
)

# vue_tsc_bin.vue_tsc_test(
#     name = "type-check",
#     args = ["--noEmit"],
#     chdir = package_name(),
#     data = SRCS + BUILD_DEPS,
#     include_declarations = True,
# )

# vite_bin.vite_binary(
#     name = "vite",
#     chdir = package_name(),
#     data = SRCS + BUILD_DEPS,
# )

# build_test(
#     name = "build_test",
#     targets = [
#         ":build",
#         ":type-check",
#     ],
# )
