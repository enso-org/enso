load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@crates//:defs.bzl", "aliases", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_shared_library")
load("@rules_rust//wasm_bindgen:defs.bzl", "rust_wasm_bindgen")

rust_shared_library(
    name = "rust_lib",
    srcs = glob(["src/**/*.rs"]),
    aliases = aliases(),
    edition = "2021",
    proc_macro_deps = all_crate_deps(proc_macro = True),
    deps = all_crate_deps(normal = True) + [
        "//lib/rust/parser:enso-parser",
        "//lib/rust/parser/doc-parser:enso-doc-parser",
    ],
)

rust_wasm_bindgen(
    name = "rust_ffi",
    target = "bundler",
    wasm_file = ":rust_lib",
)

copy_to_directory(
    name = "rust-ffi-dist",
    srcs = [":rust_ffi"],
    out = "dist",
)

npm_package(
    name = "pkg",
    srcs = [
        "package.json",
        ":rust-ffi-dist",
    ],
    visibility = ["//visibility:public"],
)

# Convenience rule to output built artifacts to the filesystem, so JS tooling can see them.
# Important! Make sure the output of this rule is NOT used during the build process.
write_source_files(
    name = "write_wasm_dist",
    files = {
        "dist": ":rust-ffi-dist",
    },
    suggested_update_target = "//:write_all",
    visibility = ["//visibility:public"],
)
