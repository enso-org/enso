from Standard.Base import all

import Standard.Base.Errors.Common.Forbidden_Operation
import Standard.Base.Errors.Common.Syntax_Error
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument
import Standard.Base.Network.HTTP.HTTP_Error.HTTP_Error
import Standard.Base.Network.HTTP.Request.Request
import Standard.Base.Network.HTTP.Response.Response
import Standard.Base.Network.HTTP.Request_Body.Request_Body
import Standard.Base.Network.HTTP.Request_Error
import Standard.Base.Network.Proxy.Proxy
import Standard.Base.Runtime.Context
from Standard.Base.Network.HTTP import resolve_headers

from Standard.Test import all
from Standard.Test.Execution_Context_Helpers import run_with_and_without_output

from project.Network.Http.Http_Test_Setup import base_url_with_slash, pending_has_url

type Test_Type
    Aaa (s:Text)
    Bbb (i:Integer)

type Bad_To_Json
    Aaa (s:Text)
    to_json self = Error.throw (Illegal_Argument.Error "test")

# Clear out fields that we want to ignore
remove_fields json =
    json.set_value  "headers" (json.at "headers" . set_value "User-Agent" "")
compare_responses a b = (remove_fields a).should_equal (remove_fields b)

## To run this test locally:
   $ sbt 'http-test-helper/run localhost 8080'
   $ export ENSO_HTTP_TEST_HTTPBIN_URL=http://localhost:8080/
add_specs suite_builder =
    suite_builder.group "HTTP_Method parse" group_builder->
        group_builder.specify "should be able to parse a string value into a method" <|
            "GET" . to HTTP_Method . should_equal (HTTP_Method.Get)
            "POST" . to HTTP_Method . should_equal (HTTP_Method.Post)
            "PUT" . to HTTP_Method . should_equal (HTTP_Method.Put)
            "PATCH" . to HTTP_Method . should_equal (HTTP_Method.Patch)

        group_builder.specify "should be case insensitive" <|
            "get" . to HTTP_Method . should_equal (HTTP_Method.Get)
            "pOst" . to HTTP_Method . should_equal (HTTP_Method.Post)
            "puT" . to HTTP_Method . should_equal (HTTP_Method.Put)
            "PATCH" . to HTTP_Method . should_equal (HTTP_Method.Patch)

        group_builder.specify "should make a custom method" <|
            "CUSTOM" . to HTTP_Method . should_equal (HTTP_Method.Custom "CUSTOM")

    suite_builder.group "HTTP_Status_Code" group_builder->
        group_builder.specify "should have a nice text representation" <|
            s1 = HTTP_Status_Code.ok
            s1.code . should_equal 200
            s1.to_text . should_equal "200 OK"
            s1.to_display_text . should_equal "OK"

            s2 = HTTP_Status_Code.not_found
            s2.code . should_equal 404
            s2.to_text . should_equal "404 Not Found"
            s2.to_display_text . should_equal "Not Found"

    suite_builder.group "HTTP client" pending=pending_has_url group_builder->
        group_builder.specify "should create HTTP client with timeout setting" <|
            http = HTTP.new (timeout = (Duration.new seconds=30))
            http.timeout.should_equal (Duration.new seconds=30)

        group_builder.specify "should create HTTP client with follow_redirects setting" <|
            http = HTTP.new (follow_redirects = False)
            http.follow_redirects.should_equal False

            Test.with_retries <|
                r = http.request (Request.new HTTP_Method.Get base_url_with_slash+"test_redirect")
                r.should_fail_with HTTP_Error
                r.catch.should_be_a HTTP_Error.Status_Error
                r.catch.status_code.code . should_equal 302

        group_builder.specify "should create HTTP client with proxy setting" <|
            proxy_setting = Proxy.Address "example.com" 80
            http = HTTP.new (proxy = proxy_setting)
            http.proxy.should_equal proxy_setting

        group_builder.specify "should create HTTP client with version setting" <|
            version_setting = HTTP_Version.HTTP_2
            http = HTTP.new (version = version_setting)
            http.version.should_equal version_setting

    url_get = base_url_with_slash.if_not_nothing <| base_url_with_slash + "get"
    suite_builder.group "fetch" pending=pending_has_url group_builder->
        url_head = base_url_with_slash + "head"
        url_options = base_url_with_slash + "options"

        group_builder.specify "Can perform a GET with a JSON response" <| Test.with_retries <|
            response = Data.fetch url_get
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Length": "0"
                  },
                  "origin": "127.0.0.1",
                  "path": "/get",
                  "method": "GET",
                  "args": {}
                }
            compare_responses response expected_response

            uri_response = url_get.to URI . fetch
            compare_responses uri_response expected_response

        group_builder.specify "Can perform a HEAD" <| Test.with_retries <|
            response = Data.fetch url_head method=HTTP_Method.Head
            response.code.code . should_equal 200
            response.decode_as_text . should_equal ''

            uri_response = url_head.to_uri.fetch method=HTTP_Method.Head
            uri_response.code.code . should_equal 200
            uri_response.decode_as_text . should_equal ''

        group_builder.specify "Can perform an OPTIONS" <| Test.with_retries <|
            response = Data.fetch url_options method=HTTP_Method.Options
            response.code.code . should_equal 200
            response.decode_as_text . should_equal ''

            uri_response = url_head.to_uri.fetch method=HTTP_Method.Options
            uri_response.code.code . should_equal 200
            uri_response.decode_as_text . should_equal ''

        group_builder.specify "Can perform auto-parse" <| Test.with_retries <|
            response = Data.fetch url_get
            response.at "headers" . at "Content-Length" . should_equal "0"

            uri_response = url_get.to_uri.fetch
            uri_response.at "headers" . at "Content-Length" . should_equal "0"

        group_builder.specify "Can skip auto-parse" <| Test.with_retries <|
            response = Data.fetch url_get format=Raw_Response
            response.code.code . should_equal 200
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Length": "0"
                  },
                  "origin": "127.0.0.1",
                  "path": "/get",
                  "method": "GET",
                  "args": {}
                }
            compare_responses response.decode_as_json expected_response

            uri_response = url_get.to_uri.fetch format=Raw_Response
            uri_response.code.code . should_equal 200
            compare_responses uri_response.decode_as_json expected_response

        group_builder.specify "Can still perform request when output context is disabled" <|
            run_with_and_without_output <| Test.with_retries <|
                Data.fetch url_get format=Raw_Response . code . code . should_equal 200
                Data.fetch url_get method=HTTP_Method.Head format=Raw_Response . code . code . should_equal 200
                Data.fetch url_get method=HTTP_Method.Options format=Raw_Response . code . code . should_equal 200

        group_builder.specify "Unsupported method" <|
            err = Data.fetch url_get method=HTTP_Method.Post
            err.catch.should_equal (Illegal_Argument.Error "Unsupported method POST")

        group_builder.specify "Cannot DELETE through fetch" <|
            err = Data.fetch url_get method=HTTP_Method.Delete
            err.catch.should_equal (Illegal_Argument.Error "Unsupported method DELETE")

        group_builder.specify "unknown host" <|
            Data.fetch "http://undefined_host.invalid" . should_fail_with Illegal_Argument

        group_builder.specify "Fails on a bad URL scheme" <|
            Data.fetch "zxcv://bad.scheme" . should_fail_with Illegal_Argument
            Data.fetch "" . should_fail_with Illegal_Argument

        group_builder.specify "can select the version" <| Test.with_retries <|
            req = Request.get url_get
            r2 = HTTP.new version=HTTP_Version.HTTP_2 . request req cache_policy=..No_Cache . decode_as_json
            r2.at "headers" . at "Connection" . should_equal "Upgrade, HTTP2-Settings"
            r2.at "headers" . at "Http2-Settings" . should_contain "AA"

            r1 = HTTP.new version=HTTP_Version.HTTP_1_1 . request req cache_policy=..No_Cache . decode_as_json
            header_names = r1.at "headers" . field_names . map (s-> s.to_case Case.Lower)
            header_names.should_not_contain "connection"
            header_names.should_not_contain "http2-settings"
            header_names.should_not_contain "upgrade"

    suite_builder.group "HTTP in Data.read" pending=pending_has_url group_builder->
        group_builder.specify "can use URI in Data.read" <| Test.with_retries <|
            r = Data.read (URI.from url_get)
            r.should_be_a JS_Object

        group_builder.specify "works if HTTP is uppercase" <| Test.with_retries <|
            r = Data.fetch (url_get.replace "http" "HTTP")
            r.should_be_a JS_Object

        group_builder.specify "should follow redirects" <| Test.with_retries <|
            r = Data.read base_url_with_slash+"test_redirect"
            r.should_be_a Text
            r.trim . should_equal '{"hello": "world"}'

        group_builder.specify "can override the format" <| Test.with_retries <|
            auto_response = Data.read url_get
            auto_response.should_be_a JS_Object

            plain_response = Data.read url_get format=..Plain_Text
            plain_response.should_be_a Text

    suite_builder.group "post" pending=pending_has_url group_builder->
        url_post = base_url_with_slash + "post"
        url_put = base_url_with_slash + "put"
        url_patch = base_url_with_slash + "patch"
        url_delete = base_url_with_slash + "delete"

        group_builder.specify "Can perform a Request_Body.Text POST" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text "hello world")
            expected_response = echo_response_template "POST" "/post" "hello world" content_type="text/plain; charset=UTF-8"
            compare_responses response expected_response

            url_response = url_post.to_uri.post (Request_Body.Text "hello world")
            compare_responses url_response expected_response

        group_builder.specify "Can perform a Request_Body.Json JSON POST" <| Test.with_retries <|
            json = Json.parse '{"a": "asdf", "b": 123}'
            response = Data.post url_post (Request_Body.Json json)
            expected_response = echo_response_template "POST" "/post" '{"a":"asdf","b":123}' content_type="application/json"
            compare_responses response expected_response

        group_builder.specify "Can perform a JSON POST" <| Test.with_retries <|
            json = Json.parse '{"a": "asdf", "b": 123}'
            response = Data.post url_post json
            expected_response = echo_response_template "POST" "/post" '{"a":"asdf","b":123}' content_type="application/json"
            compare_responses response expected_response

        group_builder.specify "Can perform an object Request_Body.Json POST" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Json (Test_Type.Aaa "abc"))
            expected_response = echo_response_template "POST" "/post" '{"type":"Test_Type","constructor":"Aaa","s":"abc"}' content_type="application/json"
            compare_responses response expected_response

        group_builder.specify "Can perform an object JSON POST" <| Test.with_retries <|
            response = Data.post url_post (Test_Type.Bbb 12)
            expected_response = echo_response_template "POST" "/post" '{"type":"Test_Type","constructor":"Bbb","i":12}' content_type="application/json"
            compare_responses response expected_response

            uri_response = url_post.to_uri.post (Test_Type.Bbb 12)
            compare_responses uri_response expected_response

        group_builder.specify "can handle a bad .to_json" <|
            Data.post url_post (Bad_To_Json.Aaa "abcd") . should_fail_with Illegal_Argument

        group_builder.specify "Can perform a Text POST with explicit encoding" <| Test.with_retries <|
            body = Request_Body.Text 'Hello World!' encoding=Encoding.utf_16_le
            response = Data.post url_post body
            expected_response = echo_response_template "POST" "/post" "Hello World!" content_type="text/plain; charset=UTF-16LE" content_length=24
            compare_responses response expected_response

            uri_response = url_post.to_uri.post body
            compare_responses uri_response expected_response

        group_builder.specify "Can perform a Text POST with explicit content type" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text 'a,b,c\n' content_type="text/csv")

            expected_response = echo_response_template "POST" "/post" 'a,b,c\n' content_type="text/csv; charset=UTF-8"
            compare_responses response expected_response

        group_builder.specify "Can perform a File POST" <| Test.with_retries <|
            test_file = enso_project.data / "sample.txt"
            response = Data.post url_post (Request_Body.Binary test_file)
            response.at "headers" . at "Content-Type" . should_equal "application/octet-stream"
            expected_text = test_file.read_text
            response . at "data" . should_equal expected_text

        group_builder.specify "Can perform a binary File POST" <| Test.with_retries <|
            test_file = enso_project.data / "sample.png"
            response = Data.post url_post (Request_Body.Binary test_file)
            response.at "headers" . at "Content-Type" . should_equal "application/octet-stream"
            response.at "headers" . at "Content-Length" . should_equal test_file.size.to_text
            response.at "data" . should_start_with '\uFFFDPNG'

        group_builder.specify "Can perform a url-encoded form POST" <| Test.with_retries <|
            test_file = enso_project.data / "sample.txt"
            form_data = Dictionary.from_vector [["key", "val"], ["a_file", test_file]]
            response = Data.post url_post (Request_Body.Form_Data form_data url_encoded=True)
            response.at "headers" . at "Content-Type" . should_equal "application/x-www-form-urlencoded"
            response.at "data" . replace "%0D%" "%" . should_equal 'key=val&a_file=Cupcake+ipsum+dolor+sit+amet.+Caramels+tootsie+roll+cake+ice+cream.+Carrot+cake+apple+pie+gingerbread+chocolate+cake+pudding+tart+souffl%C3%A9+jelly+beans+gummies.%0A%0ATootsie+roll+chupa+chups+muffin+croissant+fruitcake+jujubes+danish+cotton+candy+danish.+Oat+cake+chocolate+fruitcake+halvah+icing+oat+cake+toffee+powder.+Pastry+drag%C3%A9e+croissant.+Ice+cream+candy+canes+dessert+muffin+sugar+plum+tart+jujubes.%0A'

        group_builder.specify "Can perform a multipart form POST" <| Test.with_retries <|
            test_file = enso_project.data / "sample.png"
            form_data = Dictionary.from_vector [["key", "val"], ["a_file", test_file]]
            response = Data.post url_post (Request_Body.Form_Data form_data)
            response_json = response
            response_json.at "headers" . at "Content-Type" . should_start_with "multipart/form-data; boundary="
            response_json.at "data" . is_empty . should_be_false

        group_builder.specify "Can perform a File POST with auto-conversion" <| Test.with_retries <|
            test_file = enso_project.data / "sample.txt"
            response = Data.post url_post test_file
            response.at "headers" . at "Content-Type" . should_equal "application/octet-stream"
            expected_text = test_file.read_text
            response . at "data" . should_equal expected_text

        group_builder.specify "Can perform a Text POST with auto-conversion" <| Test.with_retries <|
            response = Data.post url_post "hello world"
            expected_response = echo_response_template "POST" "/post" "hello world" content_type="text/plain; charset=UTF-8"
            compare_responses response expected_response

        group_builder.specify "Can perform a Request_Body.Text PUT" <| Test.with_retries <|
            response = Data.post url_put (Request_Body.Text "hello world") method=HTTP_Method.Put
            expected_response = echo_response_template "PUT" "/put" "hello world" content_type="text/plain; charset=UTF-8"
            compare_responses response expected_response

        group_builder.specify "Can perform a Request_Body.Text PATCH" <| Test.with_retries <|
            response = Data.post url_patch (Request_Body.Text "hello world" content_type="application/diff") method=HTTP_Method.Patch
            expected_response = echo_response_template "PATCH" "/patch" "hello world" content_type="application/diff; charset=UTF-8"
            compare_responses response expected_response

        group_builder.specify "Can perform a DELETE" <| Test.with_retries <|
            response = Data.post url_delete method=HTTP_Method.Delete
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Length": "0"
                  },
                  "origin": "127.0.0.1",
                  "path": "/delete",
                  "method": "DELETE",
                  "form": null,
                  "files": null,
                  "data": "",
                  "args": {}
                }
            compare_responses response expected_response

        group_builder.specify "Can skip auto-parse" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text "hello world") response_format=Raw_Response
            expected_response = echo_response_template "POST" "/post" "hello world" content_type="text/plain; charset=UTF-8"
            compare_responses response.decode_as_json expected_response

        group_builder.specify "Can send a custom header" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text "hello world") headers=[Header.new "Custom" "asdf", Header.new "Another" 'a:b: c - "ddd"']
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "11",
                    "Custom": "asdf",
                    "Another": "a:b: c - \\"ddd\\""
                  },
                  "origin": "127.0.0.1",
                  "path": "/post",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "hello world",
                  "args": {}
                }
            compare_responses response expected_response

        group_builder.specify "can handle HTTP errors" <| Test.with_retries <|
            # This should give us 405 method not allowed
            r1 = Data.post url_delete
            r1.should_fail_with HTTP_Error
            r1.catch.should_be_a HTTP_Error.Status_Error
            r1.catch.status_code.code . should_equal 405
            r1.catch.to_display_text . should_contain "status 405"

            uri2 = URI.from (base_url_with_slash + "some/unknown/path")
            r2 = Data.post uri2
            r2.should_fail_with HTTP_Error
            r2.catch.should_be_a HTTP_Error.Status_Error
            r2.catch.status_code.code . should_equal 404
            r2.catch.message . should_contain "<h1>404 Not Found</h1>"
            r2.catch.uri . should_equal uri2

            r3 = HTTP.new.request (Request.new (HTTP_Method.Custom "BREW_COFFEE") (base_url_with_slash + "get"))
            r3.should_fail_with HTTP_Error
            r3.catch.should_be_a HTTP_Error.Status_Error
            r3.catch.status_code.code . should_equal 400

            # Also ensure it works when arguments were added
            uri4 = uri2.add_query_argument "a" "b" . add_query_argument "c" "d"
            uri4.should_be_a URI
            r4 = uri4.fetch
            r4.should_fail_with HTTP_Error
            r4.catch.should_be_a HTTP_Error.Status_Error
            r4.catch.status_code.code . should_equal 404
            r4.catch.uri . should_equal (URI.from uri4)

        group_builder.specify "Cannot perform POST when output context is disabled" <|
            Context.Output.with_disabled <|
                Data.post url_post (Request_Body.Text "hello world") . should_fail_with Forbidden_Operation

        group_builder.specify "Cannot perform PATCH/PUT/DELETE when output context is disabled" <|
            Context.Output.with_disabled <|
                Data.post url_post (Request_Body.Text "hello world") . should_fail_with Forbidden_Operation
                Data.post url_put (Request_Body.Text "hello world") method=HTTP_Method.Put . should_fail_with Forbidden_Operation
                Data.post url_patch (Request_Body.Text "hello world") method=HTTP_Method.Patch . should_fail_with Forbidden_Operation
                Data.post url_delete method=HTTP_Method.Delete . should_fail_with Forbidden_Operation

        group_builder.specify "Unsupported method" <|
            err = Data.post url_post (Request_Body.Text "hello world") method=HTTP_Method.Get
            err.catch.should_equal (Illegal_Argument.Error "Unsupported method GET")

            err2 = Data.post url_post (Request_Body.Text "hello world") method=(HTTP_Method.Custom "BREW_COFFEE")
            err2.catch.should_equal (Illegal_Argument.Error "Unsupported method Custom: BREW_COFFEE")

        group_builder.specify "unknown host" <|
            Data.post "http://undefined_host.invalid" (Request_Body.Text "hello world") . should_fail_with Illegal_Argument

        group_builder.specify "Nonexistent file" <|
            test_file = enso_project.data / "does_not_exist.txt"
            Data.post url_post (Request_Body.Binary test_file) . should_fail_with Request_Error

    suite_builder.group "Headers" pending=pending_has_url group_builder->
        url_post = base_url_with_slash + "post"

        group_builder.specify "Content-type in the body is respected" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}' content_type="application/json")
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json; charset=UTF-8",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "path": "/post",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            compare_responses response expected_response

        group_builder.specify "Content type in the header list is respected" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}') headers=[Header.content_type "application/json"]
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "path": "/post",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            compare_responses response expected_response

        group_builder.specify "Multiple content types in the header list are respected" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}') headers=[Header.content_type "application/json", Header.content_type "text/plain"]
            ## Our http-test-helper gets 2 Content-Type headers and merges them in the response.
               How this is interpreted in practice depends on the server.
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "application/json, text/plain",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "path": "/post",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            compare_responses response expected_response

        group_builder.specify "Unspecified content type defaults to text/plain" <| Test.with_retries <|
            response = Data.post url_post (Request_Body.Text '{"a": "asdf", "b": 123}')
            expected_response = Json.parse <| '''
                {
                  "headers": {
                    "Connection": "Upgrade, HTTP2-Settings",
                    "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
                    "User-Agent": "Java-http-client/21.0.1",
                    "Upgrade": "h2c",
                    "Content-Type": "text/plain; charset=UTF-8",
                    "Content-Length": "23"
                  },
                  "origin": "127.0.0.1",
                  "path": "/post",
                  "method": "POST",
                  "form": null,
                  "files": null,
                  "data": "{\\"a\\": \\"asdf\\", \\"b\\": 123}",
                  "args": {}
                }
            compare_responses response expected_response

        group_builder.specify "Cannot specify content type in both body and headers" <|
            Data.post url_post (Request_Body.Text "hello world" content_type="text/plain") headers=[Header.content_type "application/json"] . should_fail_with Illegal_Argument

        group_builder.specify "Cannot specify content type (implicitly via explicit text encoding) in both body and headers" <|
            Data.post url_post (Request_Body.Text "hello world" encoding=Encoding.utf_8) headers=[Header.content_type "application/json"] . should_fail_with Illegal_Argument

        group_builder.specify "can also read headers from a response, when returning a raw response" <| Test.with_retries <|
            r1 = Data.post url_post (Request_Body.Text "hello world") response_format=Raw_Response
            r1.should_be_a Response
            # The result is JSON data:
            r1.headers.find (p-> p.name.equals_ignore_case "Content-Type") . value . should_equal "application/json"
            r1.get_header "Content-Type" . should_equal "application/json"
            r1.get_header "Some-NONEXISTENT-header" . should_equal Nothing
            r1.get_header "Some-NONEXISTENT-header" if_missing=42 . should_equal 42
            r1.get_header "Some-NONEXISTENT-header" if_missing=(Error.throw (Illegal_Argument.Error "foo")) . should_fail_with Illegal_Argument
            r1.get_header "Content-Type" if_missing=(Error.throw (Illegal_Argument.Error "foo")) . should_equal "application/json"

            uri = URI.from (base_url_with_slash + "test_headers")
                . add_query_argument "test-header" "test-value"
                . add_query_argument "Other-Header" "some other value"
            r2 = Data.fetch uri format=Raw_Response
            r2.should_be_a Response
            r2.headers.find (p-> p.name.equals_ignore_case "Test-Header") . value . should_equal "test-value"
            r2.headers.find (p-> p.name.equals_ignore_case "Other-Header") . value . should_equal "some other value"

        group_builder.specify "is capable of handling aliasing headers" <| Test.with_retries <|
            uri = URI.from (base_url_with_slash + "test_headers")
                . add_query_argument "my-header" "value-1"
                . add_query_argument "my-header" "value-2"
                . add_query_argument "my-header" "value-44"
            r1 = Data.fetch uri format=Raw_Response
            r1.should_be_a Response
            my_headers = r1.headers.filter (p-> p.name.equals_ignore_case "my-header") . map .value
            my_headers.sort . should_equal ["value-1", "value-2", "value-44"]

    suite_builder.group "Header resolution" group_builder->
        group_builder.specify "Default content type and encoding" <|
            expected = [Header.content_type "text/plain; charset=UTF-8"]
            resolve_headers (Request.new HTTP_Method.Get "" [] (Request_Body.Text "")) . should_equal_ignoring_order expected

        group_builder.specify "Content type specified in body" <|
            expected = [Header.content_type "application/json; charset=UTF-8"]
            resolve_headers (Request.new HTTP_Method.Get "" [] (Request_Body.Text "" content_type="application/json")) . should_equal_ignoring_order expected

        group_builder.specify "Content type specified in header list" <|
            expected = [Header.content_type "application/json"]
            resolve_headers (Request.new HTTP_Method.Get "" [Header.content_type "application/json"] (Request_Body.Text "")) . should_equal_ignoring_order expected

        group_builder.specify "Text encoding specified in body" <|
            expected = [Header.content_type "text/plain; charset=UTF-16LE"]
            resolve_headers (Request.new HTTP_Method.Get "" [] (Request_Body.Text "" encoding=Encoding.utf_16_le)) . should_equal_ignoring_order expected

        group_builder.specify "Can't specify content type in both places" <|
            resolve_headers (Request.new HTTP_Method.Get "" [Header.content_type "application/json"] (Request_Body.Text "" content_type="text/plain")) . should_fail_with Illegal_Argument

        group_builder.specify "Custom header" <|
            expected = [Header.new "some" "header", Header.content_type "application/json; charset=UTF-8"]
            resolve_headers (Request.new HTTP_Method.Get "" [Header.new "some" "header"] (Request_Body.Text "" content_type="application/json")) . should_equal_ignoring_order expected

        group_builder.specify "Multiple content types in header list are ok" <|
            expected = [Header.content_type "application/json", Header.content_type "text/plain"]
            resolve_headers (Request.new HTTP_Method.Get "" [Header.content_type "application/json", Header.content_type "text/plain"] (Request_Body.Text "")) . should_equal_ignoring_order expected

    suite_builder.group "Http Error handling" group_builder->
        group_builder.specify "should be able to handle request errors" <|
            err = Data.fetch "http://0.0.0.0:1/"
            err.should_fail_with Request_Error

        ## Checking this error partially as a warning - I spent a lot of time debugging why I'm getting such an error.
           Apparently it happens when the httpbin server was crashing without sending any response.
        group_builder.specify "should be able to handle server crash resulting in no response" pending=pending_has_url <|
            err = Data.fetch (base_url_with_slash+"crash")
            err.should_fail_with Request_Error
            err.catch.error_type . should_equal "java.io.IOException"
            ## TODO I'm wondering if we should detect this particular error and add some explanation to it -
               i.e. "The server did not send back any data."
               I think it may be worth adding, because it may be really quite confusing for end users who get that kind of error.
            err.catch.message . should_equal "HTTP/1.1 header parser received no bytes"

        group_builder.specify "should be able to handle occasional server crashes and retry" pending=pending_has_url <|
            r1 = Data.fetch (base_url_with_slash+"crash?success_every=2")
            r1.should_succeed
            r1.should_be_a Response

        group_builder.specify "should be able to handle server crash that closes stream abruptly" pending=pending_has_url <|
            err = Data.fetch (base_url_with_slash+"crash?type=stream")
            err.should_fail_with HTTP_Error
            err.catch.message . should_equal "An IO error has occurred: java.io.IOException: closed"

        group_builder.specify "should be able to handle occasional abrupt stream closures and retry" pending=pending_has_url <|
            r1 = Data.fetch (base_url_with_slash+"crash?type=stream&success_every=2")
            r1.should_succeed
            r1.should_be_a Response

    suite_builder.group "Http Auth" group_builder->
        group_builder.specify "should support Basic user+password authentication" pending=pending_has_url <| Test.with_retries <|
            url = base_url_with_slash + "test_basic_auth"

            # Correct user and password
            r1 = Data.fetch url headers=[Header.authorization_basic "enso-test-user" "my secret password: 1234@#; ść + 😎"]
            r1.should_succeed
            r1.should_be_a Text
            r1.should_equal "Authorization successful, welcome enso-test-user!"

            # No auth data
            r2 = Data.fetch url
            r2.should_fail_with HTTP_Error
            r2.catch.status_code.code . should_equal 401

            # Incorrect credentials
            r3 = Data.fetch url headers=[Header.authorization_basic "other user" "1234"]
            r3.should_fail_with HTTP_Error
            r3.catch.status_code.code . should_equal 403

            # Correct user, incorrect password
            r4 = Data.fetch url headers=[Header.authorization_basic "enso-test-user" "1234"]
            r4.should_fail_with HTTP_Error
            r4.catch.status_code.code . should_equal 403

        group_builder.specify "should support Bearer token authentication" pending=pending_has_url <| Test.with_retries <|
            url = base_url_with_slash + "test_token_auth"

            # Correct token
            r1 = Data.fetch url headers=[Header.authorization_bearer "deadbeef-coffee-1234"]
            r1.should_succeed
            r1.should_be_a Text
            r1.should_equal "Authorization successful."

            # No auth data
            r2 = Data.fetch url
            r2.should_fail_with HTTP_Error
            r2.catch.status_code.code . should_equal 401

            # Invalid token
            r3 = Data.fetch url headers=[Header.authorization_bearer "invalid-token"]
            r3.should_fail_with HTTP_Error
            r3.catch.status_code.code . should_equal 401

main filter=Nothing =
    suite = Test.build suite_builder->
        add_specs suite_builder
    suite.run_with_filter filter


echo_response_template method path data content_type content_length=data.length =
    template = '''
        {
          "headers": {
            "Connection": "Upgrade, HTTP2-Settings",
            "Http2-Settings": "AAEAAEAAAAIAAAABAAMAAABkAAQBAAAAAAUAAEAA",
            "User-Agent": "Java-http-client/21.0.1",
            "Upgrade": "h2c",
            "Content-Type": "<$CONTENT_TYPE>",
            "Content-Length": "<$CONTENT_LENGTH>"
          },
          "origin": "127.0.0.1",
          "path": "<$PATH>",
          "method": "<$METHOD>",
          "form": null,
          "files": null,
          "data": <$DATA>,
          "args": {}
        }

    replaced = template
        . replace "<$CONTENT_TYPE>" content_type
        . replace "<$CONTENT_LENGTH>" content_length.to_text
        . replace "<$METHOD>" method
        . replace "<$PATH>" path
        . replace "<$DATA>" data.to_json
    Json.parse replaced
