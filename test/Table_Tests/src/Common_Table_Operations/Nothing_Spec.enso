from Standard.Base import all

from Standard.Table import all

import Standard.Database.DB_Column.DB_Column
import Standard.Database.Feature.Feature

from Standard.Test import Test
import Standard.Test.Extensions

from project.Common_Table_Operations.Util import run_default_backend

main filter=Nothing = run_default_backend add_specs filter

type My_Type
    Value x:Text

type Lazy_Ref
    Value ~get

add_specs suite_builder setup =
    if setup.is_feature_supported Feature.Sort then (add_nothing_specs suite_builder setup)
    
add_nothing_specs suite_builder setup =
    prefix = setup.prefix

    # We cannot create a column of Nothing/NULL in the database without casting it to a non-mixed type.
    type_for_nothing_column = if setup.is_database then Value_Type.Char else Value_Type.Mixed

    zone = Time_Zone.parse "Z"

    mixed_values = if setup.is_database then [] else
        [[My_Type.Value "1", My_Type.Value "2", Value_Type.Mixed]]
            + [[[1], [2], Value_Type.Mixed]]
    date_time_values = if setup.test_selection.date_time.not then [] else
        [[Date.new 2024 1 3, Date.new 2024 1 4, Value_Type.Date]]
            + [[Date_Time.new 2024 1 3 2 30 10 zone=zone, Date_Time.new 2024 1 3 2 30 11 zone=zone, Value_Type.Date_Time]]
            + [[Time_Of_Day.new 2 30 10, Time_Of_Day.new 2 30 11, Value_Type.Time]]
    basic_values_without_nothing = [[False, True, Value_Type.Boolean]]
        + [["abcd", "efgh", Value_Type.Char]]
    advanced_values_without_nothing = [[12, 13, Value_Type.Integer]]
        + [[9223372036854775806, 9223372036854775807, Value_Type.Integer]]
        + [[12.3, 23.4, Value_Type.Float]]
        + date_time_values
        + mixed_values
    values_without_nothing = if setup.test_selection.run_advanced_edge_case_tests then basic_values_without_nothing + advanced_values_without_nothing else basic_values_without_nothing
    values_with_nothing = values_without_nothing + [[Nothing, Nothing, type_for_nothing_column]]

    table_builder = setup.light_table_builder
    table_builder_typed columns value_type =
        ## TODO light_table_builder fails here with
           Cannot cast Unsupported_Data_Type (NULL) type into ...
        #raw_table = setup.light_table_builder columns
        #raw_table.cast raw_table.column_names value_type
        # TODO maybe use different builder depending on DB??
        cast_columns = columns.map c->
            Column.from_vector (c.at 0) (c.at 1) . cast value_type
        setup.table_builder cast_columns

    suite_builder.group prefix+"(Nothing_Spec) Comparisons" group_builder->
        comparisons = [["==", ==], ["!=", !=], ["<", <]] + (if setup.test_selection.run_advanced_edge_case_tests then [["<=", <=], [">", >], [">=", >=]] else [])

        comparisons.map pair->
            comparison_name = pair.at 0
            comparison = pair.at 1

            values_with_nothing.map triple->
                value = triple.at 0
                value_type = triple.at 2

                # TODO reuse tables between tests, here and later
                group_builder.specify "Correctly handle Nothing in: "+value.to_text+" ("+value_type.to_text+") "+comparison_name+" Nothing value" <|
                    table = table_builder_typed [["x", [value]], ["n", [Nothing]]] value_type
                    co = comparison (table.at "x") Nothing
                    co.to_vector . should_equal [Nothing]

                if setup.test_selection.run_advanced_edge_case_tests then
                    group_builder.specify "Correctly handle Nothing in: "+value.to_text+" ("+value_type.to_text+") "+comparison_name+" Nothing column" <|
                        table = table_builder_typed [["x", [value]], ["n", [Nothing]]] value_type
                        co = comparison (table.at "x") (table.at "n")
                        co.to_vector . should_equal [Nothing]

                    group_builder.specify "Correctly handle Nothing in: Nothing column "+comparison_name+" "+value.to_text+" ("+value_type.to_text+")" <|
                        table = table_builder_typed [["x", [value]], ["n", [Nothing]]] value_type
                        co = comparison (table.at "n") (table.at "x")
                        co.to_vector . should_equal [Nothing]

    suite_builder.group prefix+"(Nothing_Spec) between" group_builder->
        values_with_nothing.map triple->
            value = triple.at 0
            value_type = triple.at 2

            group_builder.specify "Correctly handle Nothing in: Nothing column between "+value_type.to_text+" and "+value_type.to_text <|
                table = table_builder_typed [["x", [value]], ["y", [value]], ["n", [Nothing]]] value_type
                co = table.at "n" . between (table.at "x") (table.at "y")
                co.to_vector . should_equal [Nothing]

            if setup.test_selection.run_advanced_edge_case_tests then
                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+" between Nothing column and "+value_type.to_text <|
                    table = table_builder_typed [["x", [value]], ["y", [value]], ["n", [Nothing]]] value_type
                    co = table.at "x" . between (table.at "n") (table.at "y")
                    co.to_vector . should_equal [Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+" between "+value_type.to_text+" and Nothing column" <|
                    table = table_builder_typed [["x", [value]], ["y", [value]], ["n", [Nothing]]] value_type
                    co = table.at "x" . between (table.at "y") (table.at "n")
                    co.to_vector . should_equal [Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+" between Nothing value and "+value_type.to_text <|
                    table = table_builder_typed [["x", [value]], ["y", [value]], ["n", [Nothing]]] value_type
                    co = table.at "x" . between Nothing (table.at "y")
                    co.to_vector . should_equal [Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+" between "+value_type.to_text+" and Nothing value" <|
                    table = table_builder_typed [["x", [value]], ["y", [value]], ["n", [Nothing]]] value_type
                    co = table.at "x" . between (table.at "y") Nothing
                    co.to_vector . should_equal [Nothing]

    suite_builder.group prefix+"(Nothing_Spec) is_nothing" group_builder->
        values_with_nothing.map triple->
            value = triple.at 0
            value_type = triple.at 2

            group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_nothing" <|
                table = table_builder_typed [["x", [value]]] value_type
                co = table.at "x" . is_nothing
                co.to_vector . should_equal [value == Nothing]

    suite_builder.group prefix+"(Nothing_Spec) not" group_builder->
        group_builder.specify "Correctly handle Nothing in .not" <|
            table = setup.light_table_builder [["x", [True, False, Nothing]]]
            table.at "x" . not . to_vector . should_equal [False, True, Nothing]

    if setup.is_operation_supported "IS_IN" then suite_builder.group prefix+"(Nothing_Spec) is_in" group_builder->
        values_with_nothing.map triple->
            value = triple.at 0
            other_value = triple.at 1
            value_type = triple.at 2

            true_if_not_nothing = if value == Nothing then Nothing else True

            group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Column (returning True)" <|
                table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                table.at "x" . is_in (table.at "z") . to_vector . should_equal [true_if_not_nothing, Nothing]

            group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Column with Nothings (returning True)" <|
                table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                table.at "x" . is_in (table.at "x") . to_vector . should_equal [true_if_not_nothing, Nothing]

            group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Column with Nothings (returning Nothing)" <|
                table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                table.at "x" . is_in (table.at "y") . to_vector . should_equal [Nothing, Nothing]

            if setup.test_selection.run_advanced_edge_case_tests then
                group_builder.specify "Correctly handle Nothing in: Nothing.is_in Column with Nothings (returning Nothing)" <|
                    table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                    table.at "n" . is_in (table.at "x") . to_vector . should_equal [Nothing, Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Vector (returning True)" <|
                    table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                    table.at "x" . is_in (table.at "z" . to_vector) . to_vector . should_equal [true_if_not_nothing, Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Vector with Nothings (returning True)" <|
                    table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                    table.at "x" . is_in (table.at "x" . to_vector) . to_vector . should_equal [true_if_not_nothing, Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in Vector with Nothings (returning Nothing)" <|
                    table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                    table.at "x" . is_in (table.at "y" . to_vector) . to_vector . should_equal [Nothing, Nothing]

                group_builder.specify "Correctly handle Nothing in: Nothing.is_in Vector with Nothings (returning Nothing)" <|
                    table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                    table.at "n" . is_in (table.at "x" . to_vector) . to_vector . should_equal [Nothing, Nothing]

                group_builder.specify "Correctly handle Nothing in: "+value_type.to_text+".is_in empty Vector (returning False)" <|
                    table = table_builder_typed [["x", [value, Nothing]], ["y", [other_value, Nothing]], ["z", [value, other_value]], ["n", [Nothing, Nothing]]] value_type
                    table.at "x" . is_in [] . to_vector . should_equal [False, False]

    if setup.test_selection.run_advanced_edge_case_tests && setup.is_operation_supported "IS_IN" then suite_builder.group prefix+"(Nothing_Spec) is_in: Boolean+Nothing edge cases" group_builder->
        make_containing_values had_null had_true had_false =
            null_maybe = if had_null then [Nothing] else []
            true_maybe = if had_true then [True] else []
            false_maybe = if had_false then [False] else []
            null_maybe + true_maybe + false_maybe

        bools = [True, False]
        bools_and_nothing = [True, False, Nothing]
        # Format: [input, had_null, had_true, had_false, output]
        cases = bools_and_nothing.flat_map input-> bools.flat_map had_null-> bools.flat_map had_true-> bools.map had_false->
            output = case input of
                True -> if had_true then True else (if had_null then Nothing else False)
                False -> if had_false then True else (if had_null then Nothing else False)
                Nothing -> if had_null || had_true || had_false then Nothing else False
            [input, had_null, had_true, had_false, output]

        # To test negated columns, we invert the values before putting them into the Storage, and set the negated bit.
        negate : Vector | Column -> Vector | Column
        negate vorc = case vorc of
            _ : Vector -> vorc.map (x-> x.if_not_nothing x.not) # Invert values first
            _ : Column -> vorc.not                              # Set negated bit
            _ : DB_Column -> vorc.not                     # Set negated bit
        negation_cases = [["normal input, normal argument", identity, identity]]
            + [["negated input, normal argument", negate, identity]]
            + [["normal input, negated argument", identity, negate]]
            + [["negated input, negated argument", negate, negate]]

        negation_cases.map negation_case->
            negation_desc = negation_case.at 0
            transform_input = negation_case.at 1
            transform_argument = negation_case.at 2

            cases.map cs->
                input = cs.at 0
                output = cs.at 4
                containing_values = make_containing_values (cs.at 1) (cs.at 2) (cs.at 3)

                group_builder.specify "Boolean is_in: edge cases (Vector), "+negation_desc+" "+cs.to_text <|
                    input_column = transform_input [input]
                    t = table_builder_typed [["input", input_column]] Value_Type.Boolean

                    c = (transform_input (t.at "input")) . is_in containing_values

                    c.to_vector . should_equal [output]

                if setup.is_feature_supported Feature.Distinct then group_builder.specify "Boolean is_in: edge cases (Column), "+negation_desc+" "+cs.to_text <|
                    input_column = transform_input (Vector.fill containing_values.length input)
                    t = table_builder_typed [["input", input_column], ["containing", transform_argument containing_values]] Value_Type.Boolean
                    expected_output = if input_column.is_empty then [] else [output]

                    c = (transform_input (t.at "input")) . is_in (transform_argument (t.at "containing"))

                    c.to_vector . length . should_equal input_column.length
                    c.to_vector.distinct . should_equal expected_output

    if setup.is_feature_supported Feature.Distinct then suite_builder.group prefix+"(Nothing_Spec) distinct" group_builder->
        values_without_nothing.map triple->
            value = triple.at 0
            other_value = triple.at 1
            value_type = triple.at 2

            group_builder.specify "Correctly handle Nothing in .distinct for "+value_type.to_text <|
                table = table_builder [["x", [value, other_value, other_value, Nothing, value, Nothing]]]
                t1 = table . distinct ["x"]
                v = t1.at "x" . to_vector
                v . length . should_equal 3
                v . should_equal_ignoring_order [value, other_value, Nothing]

        group_builder.specify "Correctly handle Nothing in .distinct for Nothing" <|
            table = table_builder_typed [["x", [Nothing, Nothing, Nothing, Nothing, Nothing, Nothing]]] Value_Type.Char
            t1 = table . distinct ["x"]
            v = t1.at "x" . to_vector
            v . should_equal [Nothing]

    suite_builder.group prefix+"(Nothing_Spec) sort" group_builder->
        values_with_nothing.map triple->
            value = triple.at 0
            other_value = triple.at 1
            value_type = triple.at 2

            is_comparable = case Ordering.compare value other_value of
                _:Ordering -> True
                _ -> False

            if is_comparable then
                table = Lazy_Ref.Value <|
                    table_builder_typed [["x", [value, Nothing, other_value, other_value, Nothing, value, Nothing]]] value_type

                group_builder.specify "Correctly handle Nothing in .sort (asc) for "+value_type.to_text <|
                    t1 = table.get . sort [..Name "x" ..Ascending]
                    t1.at "x" . to_vector . should_equal [Nothing, Nothing, Nothing, value, value, other_value, other_value]

                group_builder.specify "Correctly handle Nothing in .sort (desc) for "+value_type.to_text <|
                    t1 = table.get . sort [..Name "x" ..Descending]
                    t1.at "x" . to_vector . should_equal [other_value, other_value, value, value, Nothing, Nothing, Nothing]
