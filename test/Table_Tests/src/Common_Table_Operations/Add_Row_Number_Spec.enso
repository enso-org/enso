from Standard.Base import all
import Standard.Base.Errors.Illegal_Argument.Illegal_Argument

import Standard.Database.Extensions.Upload_Database_Table
import Standard.Database.Extensions.Upload_In_Memory_Table
import Standard.Database.Feature.Feature
from Standard.Database.Errors import all

from Standard.Table import Sort_Column, Aggregate_Column
from Standard.Table.Errors import Missing_Input_Columns, Duplicate_Output_Column_Names, Floating_Point_Equality

from Standard.Test import all


import project.Database.Helpers.Name_Generator
from project.Common_Table_Operations.Util import run_default_backend
import project.Util

polyglot java import java.lang.Long as Java_Long

main filter=Nothing = run_default_backend add_specs filter

type Data
    Value ~connection

    setup create_connection_fn = Data.Value <|
        create_connection_fn Nothing

    teardown self =
        self.connection.close

add_specs suite_builder setup =
    if setup.is_feature_supported Feature.Add_Row_Number then (add_row_number_specs suite_builder setup) else
        suite_builder.group setup.prefix+"Table.add_row_number" group_builder->
            group_builder.specify "add_row_number should report unsupported" <|
                table_builder = setup.light_table_builder
                t = table_builder [["ix", [1, 2, 3, 4, 5]], ["X", [100, 3, Nothing, 4, 12]], ["Y", [100, 4, 2, Nothing, 11]]]
                t2 = t.add_row_number
                t2.should_fail_with (Unsupported_Database_Operation.Error "add_row_number")

add_row_number_specs suite_builder setup =
    prefix = setup.prefix
    materialize = setup.materialize
    create_connection_fn = setup.create_connection_func

    suite_builder.group prefix+"Table.add_row_number (common)" group_builder->
        table_builder = setup.table_builder
        group_builder.specify "should rename existing column upon a name clash" <|
            t1 = table_builder [["X", ['a', 'b']], ["Y", ['c', 'd']], ["Z", [40, 20]]]
            t2 = t1.add_row_number name="Y" order_by=["X"] |> materialize |> _.sort "X"

            t2.column_names . should_equal ["X", "Y 1", "Z", "Y"]
            t2.at "X" . to_vector . should_equal ['a', 'b']
            t2.at "Y 1" . to_vector . should_equal ['c', 'd']
            t2.at "Z" . to_vector . should_equal [40, 20]
            t2.at "Y" . to_vector . should_equal [0, 1]
            Problems.expect_warning Duplicate_Output_Column_Names t2

            r3 = t1.add_row_number name="X" on_problems=..Report_Error
            r3.should_fail_with Duplicate_Output_Column_Names

        group_builder.specify "should allow to order the row numbers by some columns" <|
            t2 = table_builder [["X", ["a", "b", "a", "a"]], ["Y", [1, 2, 3, 4]]]
            t3 = t2.add_row_number order_by=["X", (Sort_Column.Name "Y" Sort_Direction.Descending)] |> materialize |> _.sort "Y"
            t3.at "Y" . to_vector . should_equal [1, 2, 3, 4]
            t3.at "Row" . to_vector . should_equal [2, 3, 1, 0]

        group_builder.specify "should allow mixing grouping with ordering and custom start and step" <|
            vx = ['a', 'b', 'a', 'a', 'a', 'b', 'c', 'c']
            vy = [9, 8, 7, 6, 5, 4, 100, 200]
            vr = [1, 2, 3, 4, 5, 6, 7, 8]
            t = table_builder [["X", vx], ["Y", vy], ["row_id", vr]]
            # The row id is added to enforce a clear ordering in Database
            t1 = t.add_row_number group_by=["X"] order_by=["Y"] from=100 step=100 |> materialize |> _.sort "row_id"

            t1.at "X" . to_vector . should_equal vx
            t1.at "Y" . to_vector . should_equal vy
            t1.at "Row" . to_vector . should_equal [400, 200, 300, 200, 100, 100, 100, 200]

        group_builder.specify "should report floating point equality warning when grouping on float columns" <|
            t = table_builder [["X", [1.0, 1.5, 1.0, 2.5, 2.5]], ["row_id", [1, 2, 3, 4, 5]]]
            t1 = t.add_row_number group_by=["X"] order_by=["row_id"] |> materialize |> _.sort "row_id"
            Problems.expect_warning Floating_Point_Equality t1
            t1.at "Row" . to_vector . should_equal [0, 0, 1, 0, 1]

            r2 = t.add_row_number group_by=["X"] order_by=["row_id"] on_problems=..Report_Error
            r2.should_fail_with Floating_Point_Equality

            t3 = t.add_row_number order_by=["X"] |> materialize |> _.sort "row_id"
            Problems.assume_no_problems t3
            t3.at "Row" . to_vector . should_have_relative_ordering [[0, 2], [1], [3, 4]]

            if setup.is_database.not then
                t4 = table_builder [["X", [1, "A", 1, 24.0, 24.0, 24.0, 24]], ["row_id", [1, 2, 3, 4, 5, 6, 7]]]
                t5 = t4.add_row_number from=1 group_by=["X"] order_by=["row_id"] |> materialize |> _.sort "row_id"
                Problems.expect_warning Floating_Point_Equality t5
                t5.at "Row" . to_vector . should_equal [1, 1, 2, 1, 2, 3, 4]

        group_builder.specify "should fail if columns provided in ordering/grouping do not exist" <|
            t = table_builder [["X", [20, 30, 10]]]
            r1 = t.add_row_number group_by=["X", "Y", "Z"] order_by=["X"]
            r1.should_fail_with Missing_Input_Columns
            r1.catch.criteria . should_equal ["Y", "Z"]

            r2 = t.add_row_number order_by=["Z", "X", "Y"]
            r2.should_fail_with Missing_Input_Columns
            r2.catch.criteria . should_equal ["Z", "Y"]

            r3 = t.add_row_number group_by=[44] order_by=["X"]
            r3.should_fail_with Missing_Input_Columns

        group_builder.specify "will respect the row order of order_by" <|
            t = table_builder [["X", [1, 2, 3, 4]], ["Y", [40, 30, 20, 10]]]
            t1 = t.sort "Y"

            t2 = t1.add_row_number

            t2.at "X" . to_vector . should_equal [4, 3, 2, 1]
            t2.at "Y" . to_vector . should_equal [10, 20, 30, 40]
            t2.at "Row" . to_vector . should_equal [0, 1, 2, 3]

        group_builder.specify "Should work correctly after aggregation" <|
            t0 = table_builder [["X", ["a", "b", "a", "c"]], ["Y", [1, 2, 4, 8]]]
            t1 = t0.aggregate ["X"] [Aggregate_Column.Sum "Y"]

            t2 = t1.sort "X" . add_row_number
            t2.at "X" . to_vector . should_equal ['a', 'b', 'c']
            t2.at "Sum Y" . to_vector . should_equal [5.0, 2.0, 8.0]
            t2.at "Row" . to_vector . should_equal [0, 1, 2]

    if setup.is_database.not then suite_builder.group prefix+"Table.add_row_number (in-memory specific)" group_builder->
        data = Data.setup create_connection_fn

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "should add a row numbering column" <|
            t = table_builder [["X", ['a', 'b', 'a', 'a', 'c']]]
            t1 = t.add_row_number from=1
            rows = t1.rows.to_vector . map .to_vector
            rows . should_equal [['a', 1], ['b', 2], ['a', 3], ['a', 4], ['c', 5]]
            t1.at "Row" . to_vector . should_equal [1, 2, 3, 4, 5]
            setup.expect_integer_type <| t1.at "Row"

        group_builder.specify "should allow customizing the starting index and step" <|
            t = table_builder [["X", ['a', 'b', 'a']]]
            t1 = t.add_row_number from=10
            t1.at "Row" . to_vector . should_equal [10, 11, 12]

            t2 = t.add_row_number step=10
            t2.at "Row" . to_vector . should_equal [0, 10, 20]

            t3 = t.add_row_number from=100 step=(-10)
            t3.at "Row" . to_vector . should_equal [100, 90, 80]

            t4 = t.add_row_number from=44 step=0
            t4.at "Row" . to_vector . should_equal [44, 44, 44]

            t5 = t.add_row_number from=(-1)
            t5.at "Row" . to_vector . should_equal [-1, 0, 1]

        group_builder.specify "should allow to assign row numbers separately within each group" <|
            t = table_builder [["X", ['a', 'a', 'a', 'a', 'b', 'b']], ["Y", [40, 30, 20, 40, 20, 10]]]
            t1 = t.add_row_number from=1 group_by=["X"]
            t1.at "Row" . to_vector . should_equal [1, 2, 3, 4, 1, 2]

            t2 = table_builder [["X", ['a', 'a', 'a', 'a', 'b', 'b']], ["Y", [40, 40, 20, 20, 20, 10]]]
            t3 = t2.add_row_number from=1 group_by=["X", "Y"]
            t3.at "Row" . to_vector . should_equal [1, 2, 1, 2, 1, 1]

        group_builder.specify "should allow to assign row numbers separately within scattered groups, preserving the row layout" <|
            v = ['a', 'b', 'a', 'b', 'b', 'b', 'c', 'a']
            t = table_builder [["X", v]]
            t1 = t.add_row_number from=1 group_by=["X"]
            # No reordering of elements:
            t1.at "X" . to_vector . should_equal v
            t1.at "Row" . to_vector . should_equal [1, 1, 2, 2, 3, 4, 1, 3]

        group_builder.specify "should allow mixing grouping with ordering and custom start and step, preserving the original row layout" <|
            vx = ['a', 'b', 'a', 'a', 'a', 'b', 'c', 'c']
            vy = [9, 8, 7, 6, 5, 4, 100, 200]
            vr = [1, 2, 3, 4, 5, 6, 7, 8]
            t = table_builder [["X", vx], ["Y", vy], ["row_id", vr]]
            t1 = t.add_row_number group_by=["X"] order_by=["Y"] from=100 step=100

            # No reordering occurred
            t1.at "row_id" . to_vector . should_equal vr
            t1.at "X" . to_vector . should_equal vx
            t1.at "Y" . to_vector . should_equal vy
            t1.at "Row" . to_vector . should_equal [400, 200, 300, 200, 100, 100, 100, 200]

        group_builder.specify "should allow to order the row numbers by some columns, keeping the row ordering intact" <|
            v = [9, 8, 7, 6, 5, 4, 100, 200]
            t = table_builder [["X", v]]
            t1 = t.add_row_number order_by=["X"]
            # No reordering of elements
            t1.at "X" . to_vector . should_equal v
            t1.at "Row" . to_vector . should_equal [5, 4, 3, 2, 1, 0, 6, 7]

            t2 = table_builder [["X", ["a", "b", "a", "a"]], ["Y", [1, 2, 3, 4]]]
            t3 = t2.add_row_number order_by=["X", (Sort_Column.Name "Y" Sort_Direction.Descending)]
            t3.at "Row" . to_vector . should_equal [2, 3, 1, 0]

        group_builder.specify "will fail if the row number exceeds Long range" <|
            max_long = Java_Long.MAX_VALUE

            t1 = table_builder [["X", [1, 2, 3, 4, 5]], ["Y", [1, 2, 2, 2, 2]], ["Z", [1, 5, 3, 4, 2]]]

            Problems.assume_no_problems <| t1.add_row_number from=(max_long - 10)

            r2 = t1.add_row_number from=(max_long - 1)
            r2.should_fail_with Illegal_Argument
            r2.catch.to_display_text . should_contain "The row number has exceeded the 64-bit integer range"

            t1.add_row_number from=(max_long - 1) group_by=["Y"] . should_fail_with Illegal_Argument
            t1.add_row_number from=(max_long - 1) order_by=["Z"] . should_fail_with Illegal_Argument
            t1.add_row_number from=(max_long - 1) group_by=["Y"] order_by=["Z"] . should_fail_with Illegal_Argument

            t1.add_row_number from=(max_long + 10) . should_fail_with Illegal_Argument
            t1.add_row_number from=(max_long + 10) group_by=["Y"] . should_fail_with Illegal_Argument
            t1.add_row_number from=(max_long + 10) order_by=["Z"] . should_fail_with Illegal_Argument
            t1.add_row_number from=(max_long + 10) group_by=["Y"] order_by=["Z"] . should_fail_with Illegal_Argument

    if setup.is_database then suite_builder.group prefix+"Table.add_row_number (Database specific)" group_builder->
        data = Data.setup create_connection_fn

        group_builder.teardown <|
            data.teardown

        table_builder cols =
            setup.table_builder cols connection=data.connection

        group_builder.specify "will use the primary key by default" <|
            src = table_builder [["X", [500, 400, 30, 1, 2]], ["Y", [10, 20, 30, 40, 50]]]
            db_table = src.select_into_database_table data.connection (Name_Generator.random_name "add-row-number-test-1") temporary=True primary_key=["X"]

            t2 = db_table.add_row_number |> materialize |> _.sort ["Y"]
            t2.at "Y" . to_vector . should_equal [10, 20, 30, 40, 50]
            t2.at "X" . to_vector . should_equal [500, 400, 30, 1, 2]
            t2.at "Row" . to_vector . should_equal [4, 3, 2, 0, 1]
